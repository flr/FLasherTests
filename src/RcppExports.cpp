// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <FLasher.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_FLQuant_FLQuant_multiplier_assignment_operator
FLQuant test_FLQuant_FLQuant_multiplier_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_multiplier_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_multiplier_assignment_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_multiplier_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_multiplier_assignment_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_multiplier_assignment_operator
FLQuant test_FLQuant_double_multiplier_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_multiplier_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_multiplier_assignment_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_double_multiplier_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_multiplier_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_adouble_multiplier_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_multiplier_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_operator
FLQuant test_FLQuant_FLQuant_multiplier_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_multiplier_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_multiplier_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_multiplier_operator
FLQuantAD test_FLQuantAD_FLQuant_multiplier_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_multiplier_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_multiplier_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuantAD_multiplier_operator
FLQuantAD test_FLQuant_FLQuantAD_multiplier_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuantAD_multiplier_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuantAD_multiplier_operator(flq1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_multiplier_operator
FLQuantAD test_FLQuantAD_FLQuantAD_multiplier_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_multiplier_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_multiplier_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_multiplier_operator
FLQuant test_FLQuant_double_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_multiplier_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuant_multiplier_operator
FLQuant test_double_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuant_multiplier_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuantAD_multiplier_operator
FLQuantAD test_double_FLQuantAD_multiplier_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuantAD_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuantAD_multiplier_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_multiplier_operator
FLQuantAD test_FLQuantAD_double_multiplier_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_multiplier_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_adouble_multiplier_operator
FLQuantAD test_FLQuant_adouble_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_adouble_multiplier_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuant_multiplier_operator
FLQuantAD test_adouble_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuant_multiplier_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_multiplier_operator
FLQuantAD test_FLQuantAD_adouble_multiplier_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_multiplier_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuantAD_multiplier_operator
FLQuantAD test_adouble_FLQuantAD_multiplier_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuantAD_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuantAD_multiplier_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_division_assignment_operator
FLQuant test_FLQuant_FLQuant_division_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_division_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_division_assignment_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_division_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_division_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_division_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_division_assignment_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_division_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_division_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_division_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_division_assignment_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_division_assignment_operator
FLQuant test_FLQuant_double_division_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_division_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_division_assignment_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_division_assignment_operator
FLQuantAD test_FLQuantAD_double_division_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_division_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_division_assignment_operator
FLQuantAD test_FLQuantAD_adouble_division_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_division_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_division_operator
FLQuant test_FLQuant_FLQuant_division_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_division_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_division_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_division_operator
FLQuantAD test_FLQuantAD_FLQuant_division_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_division_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_division_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuantAD_division_operator
FLQuantAD test_FLQuant_FLQuantAD_division_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuantAD_division_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuantAD_division_operator(flq1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_division_operator
FLQuantAD test_FLQuantAD_FLQuantAD_division_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_division_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_division_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_division_operator
FLQuant test_FLQuant_double_division_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_division_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuant_division_operator
FLQuant test_double_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuant_division_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuantAD_division_operator
FLQuantAD test_double_FLQuantAD_division_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuantAD_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuantAD_division_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_division_operator
FLQuantAD test_FLQuantAD_double_division_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_division_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_adouble_division_operator
FLQuantAD test_FLQuant_adouble_division_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_adouble_division_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuant_division_operator
FLQuantAD test_adouble_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuant_division_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_division_operator
FLQuantAD test_FLQuantAD_adouble_division_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_division_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuantAD_division_operator
FLQuantAD test_adouble_FLQuantAD_division_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuantAD_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuantAD_division_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_assignment_operator
FLQuant test_FLQuant_FLQuant_subtraction_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_subtraction_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_subtraction_assignment_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_subtraction_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_subtraction_assignment_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_subtraction_assignment_operator
FLQuant test_FLQuant_double_subtraction_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_subtraction_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_subtraction_assignment_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_double_subtraction_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_subtraction_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_adouble_subtraction_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_subtraction_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_operator
FLQuant test_FLQuant_FLQuant_subtraction_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_subtraction_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_subtraction_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_subtraction_operator
FLQuantAD test_FLQuantAD_FLQuant_subtraction_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_subtraction_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_subtraction_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuantAD_subtraction_operator
FLQuantAD test_FLQuant_FLQuantAD_subtraction_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuantAD_subtraction_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuantAD_subtraction_operator(flq1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_subtraction_operator
FLQuantAD test_FLQuantAD_FLQuantAD_subtraction_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_subtraction_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_subtraction_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_subtraction_operator
FLQuant test_FLQuant_double_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_subtraction_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuant_subtraction_operator
FLQuant test_double_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuant_subtraction_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuantAD_subtraction_operator
FLQuantAD test_double_FLQuantAD_subtraction_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuantAD_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuantAD_subtraction_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_subtraction_operator
FLQuantAD test_FLQuantAD_double_subtraction_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_subtraction_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_adouble_subtraction_operator
FLQuantAD test_FLQuant_adouble_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_adouble_subtraction_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuant_subtraction_operator
FLQuantAD test_adouble_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuant_subtraction_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_subtraction_operator
FLQuantAD test_FLQuantAD_adouble_subtraction_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_subtraction_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuantAD_subtraction_operator
FLQuantAD test_adouble_FLQuantAD_subtraction_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuantAD_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuantAD_subtraction_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_addition_assignment_operator
FLQuant test_FLQuant_FLQuant_addition_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_addition_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_addition_assignment_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_addition_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_addition_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_addition_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_addition_assignment_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_addition_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_addition_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_addition_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_addition_assignment_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_addition_assignment_operator
FLQuant test_FLQuant_double_addition_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_addition_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_addition_assignment_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_addition_assignment_operator
FLQuantAD test_FLQuantAD_double_addition_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_addition_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_addition_assignment_operator
FLQuantAD test_FLQuantAD_adouble_addition_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_addition_assignment_operator(flqad1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_addition_operator
FLQuant test_FLQuant_FLQuant_addition_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_addition_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_addition_operator(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_addition_operator
FLQuantAD test_FLQuantAD_FLQuant_addition_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_addition_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_addition_operator(flqad1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuantAD_addition_operator
FLQuantAD test_FLQuant_FLQuantAD_addition_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuantAD_addition_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuantAD_addition_operator(flq1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_addition_operator
FLQuantAD test_FLQuantAD_FLQuantAD_addition_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_addition_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_addition_operator(flqad1, flqad2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_double_addition_operator
FLQuant test_FLQuant_double_addition_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_double_addition_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuant_addition_operator
FLQuant test_double_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuant_addition_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_double_FLQuantAD_addition_operator
FLQuantAD test_double_FLQuantAD_addition_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_double_FLQuantAD_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_FLQuantAD_addition_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_double_addition_operator
FLQuantAD test_FLQuantAD_double_addition_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_double_addition_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_adouble_addition_operator
FLQuantAD test_FLQuant_adouble_addition_operator(FLQuant flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_adouble_addition_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuant_addition_operator
FLQuantAD test_adouble_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuant_addition_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_adouble_addition_operator
FLQuantAD test_FLQuantAD_adouble_addition_operator(FLQuantAD flq1, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_adouble_addition_operator(flq1, value));
    return rcpp_result_gen;
END_RCPP
}
// test_adouble_FLQuantAD_addition_operator
FLQuantAD test_adouble_FLQuantAD_addition_operator(double value, FLQuantAD flq1);
RcppExport SEXP _FLasherTests_test_adouble_FLQuantAD_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_adouble_FLQuantAD_addition_operator(value, flq1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_log
FLQuant test_FLQuant_log(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_log(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_log(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_log
FLQuantAD test_FLQuantAD_log(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_log(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_log(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_exp
FLQuant test_FLQuant_exp(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_exp(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_exp(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_exp
FLQuantAD test_FLQuantAD_exp(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_exp(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_exp(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_composite_arithmetic_operators
FLQuantAD test_composite_arithmetic_operators(FLQuantAD flqad, FLQuant flq, double value);
RcppExport SEXP _FLasherTests_test_composite_arithmetic_operators(SEXP flqadSEXP, SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad(flqadSEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_composite_arithmetic_operators(flqad, flq, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_quant_sum
FLQuant test_FLQuant_quant_sum(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_quant_sum(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_quant_sum(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_quant_sum
FLQuantAD test_FLQuantAD_quant_sum(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_quant_sum(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_quant_sum(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_quant_mean
FLQuant test_FLQuant_quant_mean(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_quant_mean(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_quant_mean(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_year_sum
FLQuant test_FLQuant_year_sum(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_year_sum(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_year_sum(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_year_mean
FLQuant test_FLQuant_year_mean(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_year_mean(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_year_mean(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_quant_mean
FLQuantAD test_FLQuantAD_quant_mean(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_quant_mean(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_quant_mean(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_max_quant
FLQuant test_FLQuant_max_quant(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_max_quant(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_max_quant
FLQuantAD test_FLQuantAD_max_quant(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_max_quant(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_scale_by_max_quant
FLQuant test_FLQuant_scale_by_max_quant(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_scale_by_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_scale_by_max_quant(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_scale_by_max_quant
FLQuantAD test_FLQuantAD_scale_by_max_quant(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_scale_by_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_scale_by_max_quant(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_unit_sum
FLQuantAD test_FLQuantAD_unit_sum(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_unit_sum(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_unit_sum(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_multADAD
FLQuantAD test_sweep_multADAD(FLQuantAD flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_multADAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_multADAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_multDD
FLQuant test_sweep_multDD(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_multDD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_multDD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_multADD
FLQuantAD test_sweep_multADD(FLQuantAD flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_multADD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_multADD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_multDAD
FLQuantAD test_sweep_multDAD(FLQuant flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_multDAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_multDAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_divADAD
FLQuantAD test_sweep_divADAD(FLQuantAD flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_divADAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_divADAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_divDD
FLQuant test_sweep_divDD(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_divDD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_divDD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_divADD
FLQuantAD test_sweep_divADD(FLQuantAD flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_divADD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_divADD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_divDAD
FLQuantAD test_sweep_divDAD(FLQuant flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_divDAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_divDAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_plusADAD
FLQuantAD test_sweep_plusADAD(FLQuantAD flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_plusADAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_plusADAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_plusDD
FLQuant test_sweep_plusDD(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_plusDD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_plusDD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_plusADD
FLQuantAD test_sweep_plusADD(FLQuantAD flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_plusADD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_plusADD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_plusDAD
FLQuantAD test_sweep_plusDAD(FLQuant flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_plusDAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_plusDAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_minusADAD
FLQuantAD test_sweep_minusADAD(FLQuantAD flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_minusADAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_minusADAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_minusDD
FLQuant test_sweep_minusDD(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_minusDD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_minusDD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_minusADD
FLQuantAD test_sweep_minusADD(FLQuantAD flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_sweep_minusADD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_minusADD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_sweep_minusDAD
FLQuantAD test_sweep_minusDAD(FLQuant flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_sweep_minusDAD(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_sweep_minusDAD(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_int_is_na
bool test_int_is_na(int val);
RcppExport SEXP _FLasherTests_test_int_is_na(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(test_int_is_na(val));
    return rcpp_result_gen;
END_RCPP
}
// test_double_is_na
bool test_double_is_na(double val);
RcppExport SEXP _FLasherTests_test_double_is_na(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(test_double_is_na(val));
    return rcpp_result_gen;
END_RCPP
}
// test_simple_FLCatch_sexp_constructor
int test_simple_FLCatch_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP _FLasherTests_test_simple_FLCatch_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_simple_FLCatch_sexp_constructor(flc_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_sexp_constructor
FLCatch test_FLCatch_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP _FLasherTests_test_FLCatch_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_sexp_constructor(flc_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_sexp_constructor
FLCatchAD test_FLCatchAD_sexp_constructor(SEXP flc_sexp);
RcppExport SEXP _FLasherTests_test_FLCatchAD_sexp_constructor(SEXP flc_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flc_sexp(flc_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_sexp_constructor(flc_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_as_wrap
FLCatch test_FLCatch_as_wrap(FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_as_wrap(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_as_wrap(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_as_wrap
FLCatchAD test_FLCatchAD_as_wrap(FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_as_wrap(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_as_wrap(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_copy_constructor
FLCatch test_FLCatch_copy_constructor(FLCatch flc1);
RcppExport SEXP _FLasherTests_test_FLCatch_copy_constructor(SEXP flc1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_copy_constructor(flc1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_copy_constructor
FLCatchAD test_FLCatchAD_copy_constructor(FLCatchAD flc1);
RcppExport SEXP _FLasherTests_test_FLCatchAD_copy_constructor(SEXP flc1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc1(flc1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_copy_constructor(flc1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_copy_constructor2
Rcpp::List test_FLCatch_copy_constructor2(FLCatch flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatch_copy_constructor2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_copy_constructor2(flc1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_copy_constructor2
Rcpp::List test_FLCatchAD_copy_constructor2(FLCatchAD flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatchAD_copy_constructor2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc1(flc1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_copy_constructor2(flc1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_assignment_operator
FLCatch test_FLCatch_assignment_operator(FLCatch flc1);
RcppExport SEXP _FLasherTests_test_FLCatch_assignment_operator(SEXP flc1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_assignment_operator(flc1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_assignment_operator
FLCatchAD test_FLCatchAD_assignment_operator(FLCatchAD flc1);
RcppExport SEXP _FLasherTests_test_FLCatchAD_assignment_operator(SEXP flc1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc1(flc1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_assignment_operator(flc1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_assignment_operator2
Rcpp::List test_FLCatch_assignment_operator2(FLCatch flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatch_assignment_operator2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc1(flc1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_assignment_operator2(flc1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_assignment_operator2
Rcpp::List test_FLCatchAD_assignment_operator2(FLCatchAD flc1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatchAD_assignment_operator2(SEXP flc1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc1(flc1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_assignment_operator2(flc1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_const_get_accessors
Rcpp::NumericVector test_FLCatch_const_get_accessors(const FLCatch flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatch_const_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_const_get_accessors(flc, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_const_get_accessors_subset
Rcpp::List test_FLCatch_const_get_accessors_subset(const FLCatch flc, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_FLCatch_const_get_accessors_subset(SEXP flcSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_const_get_accessors_subset(flc, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_const_get_accessors
Rcpp::NumericVector test_FLCatchAD_const_get_accessors(const FLCatchAD flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatchAD_const_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_const_get_accessors(flc, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_get_accessors
Rcpp::NumericVector test_FLCatch_get_accessors(FLCatch flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatch_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_get_accessors(flc, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_get_accessors
Rcpp::NumericVector test_FLCatchAD_get_accessors(FLCatchAD flc, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatchAD_get_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_get_accessors(flc, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_set_accessors
FLCatch test_FLCatch_set_accessors(FLCatch flc, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP _FLasherTests_test_FLCatch_set_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_set_accessors(flc, quant, year, unit, season, area, iter, values));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_set_accessors
FLCatchAD test_FLCatchAD_set_accessors(FLCatchAD flc, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP _FLasherTests_test_FLCatchAD_set_accessors(SEXP flcSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_set_accessors(flc, quant, year, unit, season, area, iter, values));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_revenue_subset
FLQuant test_FLCatch_revenue_subset(const FLCatch flc, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_FLCatch_revenue_subset(SEXP flcSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_revenue_subset(flc, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_revenue
FLQuant test_FLCatch_revenue(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_revenue(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_revenue(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_landings
FLQuant test_FLCatch_landings(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_landings(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_landings(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_landings
FLQuantAD test_FLCatchAD_landings(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_landings(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_landings(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_discards
FLQuant test_FLCatch_discards(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_discards(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_discards(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_discards
FLQuantAD test_FLCatchAD_discards(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_discards(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_discards(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_catch_n
FLQuant test_FLCatch_catch_n(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_catch_n(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_catch_n(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_catch_n
FLQuantAD test_FLCatchAD_catch_n(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_catch_n(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_catch_n(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_catch_wt
FLQuant test_FLCatch_catch_wt(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_catch_wt(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_catch_wt(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_catch_wt
FLQuantAD test_FLCatchAD_catch_wt(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_catch_wt(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_catch_wt(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_catches
FLQuant test_FLCatch_catches(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_catches(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_catches(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_catches
FLQuantAD test_FLCatchAD_catches(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_catches(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_catches(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_discards_ratio
FLQuant test_FLCatch_discards_ratio(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_discards_ratio(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_discards_ratio(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_discards_ratio
FLQuantAD test_FLCatchAD_discards_ratio(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_discards_ratio(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_discards_ratio(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_landings_sel
FLQuant test_FLCatch_landings_sel(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_landings_sel(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_landings_sel(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_landings_sel
FLQuantAD test_FLCatchAD_landings_sel(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_landings_sel(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_landings_sel(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatch_discards_sel
FLQuant test_FLCatch_discards_sel(const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatch_discards_sel(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatch_discards_sel(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_discards_sel
FLQuantAD test_FLCatchAD_discards_sel(const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchAD_discards_sel(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_discards_sel(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_catch_q_params
std::vector<double> test_FLCatchAD_catch_q_params(const FLCatchAD flc, const std::vector<unsigned int> indices);
RcppExport SEXP _FLasherTests_test_FLCatchAD_catch_q_params(SEXP flcSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_catch_q_params(flc, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchAD_catch_q_params_subset
FLQuant test_FLCatchAD_catch_q_params_subset(const FLCatchAD flc, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_FLCatchAD_catch_q_params_subset(SEXP flcSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchAD_catch_q_params_subset(flc, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_as_wrap
FLCatches test_FLCatches_as_wrap(FLCatches flcs);
RcppExport SEXP _FLasherTests_test_FLCatches_as_wrap(SEXP flcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_as_wrap(flcs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_sexp_constructor
FLCatches test_FLCatches_sexp_constructor(SEXP flcs_sexp1);
RcppExport SEXP _FLasherTests_test_FLCatches_sexp_constructor(SEXP flcs_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flcs_sexp1(flcs_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_sexp_constructor(flcs_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_FLCatch_constructor
FLCatches test_FLCatches_FLCatch_constructor(FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatches_FLCatch_constructor(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_FLCatch_constructor(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_copy_constructor
FLCatches test_FLCatches_copy_constructor(FLCatches flcs);
RcppExport SEXP _FLasherTests_test_FLCatches_copy_constructor(SEXP flcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_copy_constructor(flcs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_copy_constructor2
Rcpp::List test_FLCatches_copy_constructor2(FLCatches flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatches_copy_constructor2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs1(flcs1SEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_copy_constructor2(flcs1, catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_assignment_operator
FLCatches test_FLCatches_assignment_operator(FLCatches flcs);
RcppExport SEXP _FLasherTests_test_FLCatches_assignment_operator(SEXP flcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_assignment_operator(flcs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_assignment_operator2
Rcpp::List test_FLCatches_assignment_operator2(FLCatches flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatches_assignment_operator2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs1(flcs1SEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_assignment_operator2(flcs1, catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_function_operator
FLCatches test_FLCatches_function_operator(FLCatches flcs, FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatches_function_operator(SEXP flcsSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_function_operator(flcs, flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_get_ncatches
int test_FLCatches_get_ncatches(SEXP flc_sexp1);
RcppExport SEXP _FLasherTests_test_FLCatches_get_ncatches(SEXP flc_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flc_sexp1(flc_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_get_ncatches(flc_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_const_get_single_index_accessor
FLCatch test_FLCatches_const_get_single_index_accessor(const FLCatches flcs, const int element);
RcppExport SEXP _FLasherTests_test_FLCatches_const_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_const_get_single_index_accessor(flcs, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_get_single_index_accessor
FLCatch test_FLCatches_get_single_index_accessor(FLCatches flcs, const int element);
RcppExport SEXP _FLasherTests_test_FLCatches_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_get_single_index_accessor(flcs, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_const_get_value_accessor
double test_FLCatches_const_get_value_accessor(const FLCatches flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatches_const_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_const_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_get_value_accessor
double test_FLCatches_get_value_accessor(FLCatches flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatches_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_set_single_index_accessor
FLCatches test_FLCatches_set_single_index_accessor(FLCatches flcs, const int element, const FLCatch flc);
RcppExport SEXP _FLasherTests_test_FLCatches_set_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< const FLCatch >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_set_single_index_accessor(flcs, element, flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatches_set_value_accessor
FLCatches test_FLCatches_set_value_accessor(FLCatches flcs, const int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatches_set_value_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatches >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatches_set_value_accessor(flcs, element, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_as_wrap
FLCatchesAD test_FLCatchesAD_as_wrap(FLCatchesAD flcs);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_as_wrap(SEXP flcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_as_wrap(flcs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_sexp_constructor
FLCatchesAD test_FLCatchesAD_sexp_constructor(SEXP flcs_sexp1);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_sexp_constructor(SEXP flcs_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flcs_sexp1(flcs_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_sexp_constructor(flcs_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_FLCatchAD_constructor
FLCatchesAD test_FLCatchesAD_FLCatchAD_constructor(FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_FLCatchAD_constructor(SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_FLCatchAD_constructor(flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_copy_constructor
FLCatchesAD test_FLCatchesAD_copy_constructor(FLCatchesAD flcs);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_copy_constructor(SEXP flcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_copy_constructor(flcs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_copy_constructor2
Rcpp::List test_FLCatchesAD_copy_constructor2(FLCatchesAD flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_copy_constructor2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs1(flcs1SEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_copy_constructor2(flcs1, catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_assignment_operator
FLCatchesAD test_FLCatchesAD_assignment_operator(FLCatchesAD flcs);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_assignment_operator(SEXP flcsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_assignment_operator(flcs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_assignment_operator2
Rcpp::List test_FLCatchesAD_assignment_operator2(FLCatchesAD flcs1, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_assignment_operator2(SEXP flcs1SEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs1(flcs1SEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_assignment_operator2(flcs1, catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_function_operator
FLCatchesAD test_FLCatchesAD_function_operator(FLCatchesAD flcs, FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_function_operator(SEXP flcsSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_function_operator(flcs, flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_get_ncatches
int test_FLCatchesAD_get_ncatches(SEXP flc_sexp1);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_get_ncatches(SEXP flc_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flc_sexp1(flc_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_get_ncatches(flc_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_const_get_single_index_accessor
FLCatchAD test_FLCatchesAD_const_get_single_index_accessor(const FLCatchesAD flcs, const int element);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_const_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_const_get_single_index_accessor(flcs, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_get_single_index_accessor
FLCatchAD test_FLCatchesAD_get_single_index_accessor(FLCatchesAD flcs, const int element);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_get_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_get_single_index_accessor(flcs, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_const_get_value_accessor
double test_FLCatchesAD_const_get_value_accessor(const FLCatchesAD flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_const_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_const_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_get_value_accessor
double test_FLCatchesAD_get_value_accessor(FLCatchesAD flcs, const int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_get_value_accessor(SEXP flcsSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_get_value_accessor(flcs, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_set_single_index_accessor
FLCatchesAD test_FLCatchesAD_set_single_index_accessor(FLCatchesAD flcs, const int element, const FLCatchAD flc);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_set_single_index_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP flcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< const FLCatchAD >::type flc(flcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_set_single_index_accessor(flcs, element, flc));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_set_value_accessor
FLCatchesAD test_FLCatchesAD_set_value_accessor(FLCatchesAD flcs, const int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_set_value_accessor(SEXP flcsSEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type flcs(flcsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_set_value_accessor(flcs, element, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_const_iterator
Rcpp::List test_FLCatchesAD_const_iterator(const FLCatchesAD catches);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_const_iterator(SEXP catchesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLCatchesAD >::type catches(catchesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_const_iterator(catches));
    return rcpp_result_gen;
END_RCPP
}
// test_FLCatchesAD_iterator
FLCatchesAD test_FLCatchesAD_iterator(FLCatchesAD catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLCatchesAD_iterator(SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLCatchesAD >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLCatchesAD_iterator(catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_empty_constructor
void test_FLFishery_empty_constructor();
RcppExport SEXP _FLasherTests_test_FLFishery_empty_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_FLFishery_empty_constructor();
    return R_NilValue;
END_RCPP
}
// test_simple_FLFishery_sexp_constructor
int test_simple_FLFishery_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP _FLasherTests_test_simple_FLFishery_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_simple_FLFishery_sexp_constructor(flf_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_sexp_constructor
FLFishery test_FLFishery_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP _FLasherTests_test_FLFishery_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_sexp_constructor(flf_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_as_wrap
FLFishery test_FLFishery_as_wrap(FLFishery flf);
RcppExport SEXP _FLasherTests_test_FLFishery_as_wrap(SEXP flfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_as_wrap(flf));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_copy_constructor
FLFishery test_FLFishery_copy_constructor(FLFishery flf1);
RcppExport SEXP _FLasherTests_test_FLFishery_copy_constructor(SEXP flf1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_copy_constructor(flf1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_assignment_operator
FLFishery test_FLFishery_assignment_operator(FLFishery flf1);
RcppExport SEXP _FLasherTests_test_FLFishery_assignment_operator(SEXP flf1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_assignment_operator(flf1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_const_catches_get_accessors
Rcpp::NumericVector test_FLFishery_const_catches_get_accessors(const FLFishery flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFishery_const_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_const_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_catches_get_accessors
Rcpp::NumericVector test_FLFishery_catches_get_accessors(FLFishery flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFishery_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_const_economics_get_accessors
Rcpp::NumericVector test_FLFishery_const_economics_get_accessors(const FLFishery flf, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFishery_const_economics_get_accessors(SEXP flfSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_const_economics_get_accessors(flf, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_const_get_hperiod
double test_FLFishery_const_get_hperiod(const FLFishery flf, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFishery_const_get_hperiod(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_const_get_hperiod(flf, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_get_hperiod
double test_FLFishery_get_hperiod(FLFishery flf, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFishery_get_hperiod(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_get_hperiod(flf, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_set_hperiod
FLQuant test_FLFishery_set_hperiod(FLFishery flf, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFishery_set_hperiod(SEXP flfSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_set_hperiod(flf, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_get_effort_subset
FLQuant test_FLFishery_get_effort_subset(const FLFishery flf, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_FLFishery_get_effort_subset(SEXP flfSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_get_effort_subset(flf, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_get_effort
FLQuant test_FLFishery_get_effort(const FLFishery flf);
RcppExport SEXP _FLasherTests_test_FLFishery_get_effort(SEXP flfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_get_effort(flf));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_economics_get_accessors
Rcpp::NumericVector test_FLFishery_economics_get_accessors(FLFishery flf, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFishery_economics_get_accessors(SEXP flfSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_economics_get_accessors(flf, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_set_accessors
FLFishery test_FLFishery_set_accessors(FLFishery flf, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFishery_set_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_set_accessors(flf, catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_copy_constructor2
Rcpp::List test_FLFishery_copy_constructor2(FLFishery flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFishery_copy_constructor2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_copy_constructor2(flf1, element, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_assignment_operator2
Rcpp::List test_FLFishery_assignment_operator2(FLFishery flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFishery_assignment_operator2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFishery >::type flf1(flf1SEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_assignment_operator2(flf1, element, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_empty_constructor
void test_FLFisheryAD_empty_constructor();
RcppExport SEXP _FLasherTests_test_FLFisheryAD_empty_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_FLFisheryAD_empty_constructor();
    return R_NilValue;
END_RCPP
}
// test_simple_FLFisheryAD_sexp_constructor
int test_simple_FLFisheryAD_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP _FLasherTests_test_simple_FLFisheryAD_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_simple_FLFisheryAD_sexp_constructor(flf_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_sexp_constructor
FLFisheryAD test_FLFisheryAD_sexp_constructor(SEXP flf_sexp);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_sexp_constructor(SEXP flf_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flf_sexp(flf_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_sexp_constructor(flf_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_as_wrap
FLFisheryAD test_FLFisheryAD_as_wrap(FLFisheryAD flf);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_as_wrap(SEXP flfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf(flfSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_as_wrap(flf));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_copy_constructor
FLFisheryAD test_FLFisheryAD_copy_constructor(FLFisheryAD flf1);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_copy_constructor(SEXP flf1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf1(flf1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_copy_constructor(flf1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_assignment_operator
FLFisheryAD test_FLFisheryAD_assignment_operator(FLFisheryAD flf1);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_assignment_operator(SEXP flf1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf1(flf1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_assignment_operator(flf1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_const_catches_get_accessors
Rcpp::NumericVector test_FLFisheryAD_const_catches_get_accessors(const FLFisheryAD flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_const_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheryAD >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_const_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_catches_get_accessors
Rcpp::NumericVector test_FLFisheryAD_catches_get_accessors(FLFisheryAD flf, int catches, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_catches_get_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_catches_get_accessors(flf, catches, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_const_economics_get_accessors
Rcpp::NumericVector test_FLFisheryAD_const_economics_get_accessors(const FLFisheryAD flf, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_const_economics_get_accessors(SEXP flfSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheryAD >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_const_economics_get_accessors(flf, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_economics_get_accessors
Rcpp::NumericVector test_FLFisheryAD_economics_get_accessors(FLFisheryAD flf, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_economics_get_accessors(SEXP flfSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_economics_get_accessors(flf, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_set_accessors
FLFisheryAD test_FLFisheryAD_set_accessors(FLFisheryAD flf, int catches, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_set_accessors(SEXP flfSEXP, SEXP catchesSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_set_accessors(flf, catches, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_copy_constructor2
Rcpp::List test_FLFisheryAD_copy_constructor2(FLFisheryAD flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_copy_constructor2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf1(flf1SEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_copy_constructor2(flf1, element, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_assignment_operator2
Rcpp::List test_FLFisheryAD_assignment_operator2(FLFisheryAD flf1, int element, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_assignment_operator2(SEXP flf1SEXP, SEXP elementSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type flf1(flf1SEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_assignment_operator2(flf1, element, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_const_iterator
Rcpp::List test_FLFisheryAD_const_iterator(const FLFisheryAD fishery);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_const_iterator(SEXP fisherySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheryAD >::type fishery(fisherySEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_const_iterator(fishery));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheryAD_iterator
FLFisheryAD test_FLFisheryAD_iterator(FLFisheryAD fishery, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLFisheryAD_iterator(SEXP fisherySEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheryAD >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheryAD_iterator(fishery, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_sexp_constructor
FLFisheries test_FLFisheries_sexp_constructor(SEXP flfs_sexp1);
RcppExport SEXP _FLasherTests_test_FLFisheries_sexp_constructor(SEXP flfs_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flfs_sexp1(flfs_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_sexp_constructor(flfs_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_as_wrap
FLFisheries test_FLFisheries_as_wrap(FLFisheries flfs);
RcppExport SEXP _FLasherTests_test_FLFisheries_as_wrap(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_as_wrap(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_get_nfisheries
int test_FLFisheries_get_nfisheries(FLFisheries flfs);
RcppExport SEXP _FLasherTests_test_FLFisheries_get_nfisheries(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_get_nfisheries(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_copy_constructor
FLFisheries test_FLFisheries_copy_constructor(FLFisheries flfs);
RcppExport SEXP _FLasherTests_test_FLFisheries_copy_constructor(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_copy_constructor(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_copy_constructor2
Rcpp::List test_FLFisheries_copy_constructor2(FLFisheries flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheries_copy_constructor2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs1(flfs1SEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_copy_constructor2(flfs1, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_assignment_operator
FLFisheries test_FLFisheries_assignment_operator(FLFisheries flfs);
RcppExport SEXP _FLasherTests_test_FLFisheries_assignment_operator(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_assignment_operator(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_assignment_operator2
Rcpp::List test_FLFisheries_assignment_operator2(FLFisheries flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheries_assignment_operator2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs1(flfs1SEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_assignment_operator2(flfs1, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_const_get_single
Rcpp::List test_FLFisheries_const_get_single(const FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheries_const_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheries >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_const_get_single(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_get_single
Rcpp::List test_FLFisheries_get_single(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheries_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_get_single(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_const_get_double
Rcpp::List test_FLFisheries_const_get_double(const FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheries_const_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheries >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_const_get_double(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_get_double
Rcpp::List test_FLFisheries_get_double(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheries_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_get_double(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_set_single
FLFisheries test_FLFisheries_set_single(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheries_set_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_set_single(flfs, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheries_set_double
FLFisheries test_FLFisheries_set_double(FLFisheries flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheries_set_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheries >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheries_set_double(flfs, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_revenue
FLQuant test_FLFishery_revenue(const FLFishery flf);
RcppExport SEXP _FLasherTests_test_FLFishery_revenue(SEXP flfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_revenue(flf));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFishery_revenue_subset
FLQuant test_FLFishery_revenue_subset(const FLFishery flf, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_FLFishery_revenue_subset(SEXP flfSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFishery >::type flf(flfSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFishery_revenue_subset(flf, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_sexp_constructor
FLFisheriesAD test_FLFisheriesAD_sexp_constructor(SEXP flfs_sexp1);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_sexp_constructor(SEXP flfs_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flfs_sexp1(flfs_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_sexp_constructor(flfs_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_as_wrap
FLFisheriesAD test_FLFisheriesAD_as_wrap(FLFisheriesAD flfs);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_as_wrap(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_as_wrap(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_get_nfisheries
int test_FLFisheriesAD_get_nfisheries(FLFisheriesAD flfs);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_get_nfisheries(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_get_nfisheries(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_copy_constructor
FLFisheriesAD test_FLFisheriesAD_copy_constructor(FLFisheriesAD flfs);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_copy_constructor(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_copy_constructor(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_copy_constructor2
Rcpp::List test_FLFisheriesAD_copy_constructor2(FLFisheriesAD flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_copy_constructor2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs1(flfs1SEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_copy_constructor2(flfs1, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_assignment_operator
FLFisheriesAD test_FLFisheriesAD_assignment_operator(FLFisheriesAD flfs);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_assignment_operator(SEXP flfsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_assignment_operator(flfs));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_assignment_operator2
Rcpp::List test_FLFisheriesAD_assignment_operator2(FLFisheriesAD flfs1, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_assignment_operator2(SEXP flfs1SEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs1(flfs1SEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_assignment_operator2(flfs1, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_const_get_single
Rcpp::List test_FLFisheriesAD_const_get_single(const FLFisheriesAD flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_const_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_const_get_single(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_get_single
Rcpp::List test_FLFisheriesAD_get_single(FLFisheriesAD flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_get_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_get_single(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_const_get_double
Rcpp::List test_FLFisheriesAD_const_get_double(const FLFisheriesAD flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_const_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_const_get_double(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_get_double
Rcpp::List test_FLFisheriesAD_get_double(FLFisheriesAD flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_get_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_get_double(flfs, fishery, catches, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_set_single
FLFisheriesAD test_FLFisheriesAD_set_single(FLFisheriesAD flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_set_single(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_set_single(flfs, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_set_double
FLFisheriesAD test_FLFisheriesAD_set_double(FLFisheriesAD flfs, const int fishery, const int catches, const Rcpp::IntegerVector indices, double value);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_set_double(SEXP flfsSEXP, SEXP fisherySEXP, SEXP catchesSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery(fisherySEXP);
    Rcpp::traits::input_parameter< const int >::type catches(catchesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_set_double(flfs, fishery, catches, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_const_iterator
Rcpp::List test_FLFisheriesAD_const_iterator(const FLFisheriesAD fisheries);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_const_iterator(SEXP fisheriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type fisheries(fisheriesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_const_iterator(fisheries));
    return rcpp_result_gen;
END_RCPP
}
// test_FLFisheriesAD_iterator
FLFisheriesAD test_FLFisheriesAD_iterator(FLFisheriesAD fisheries, double value);
RcppExport SEXP _FLasherTests_test_FLFisheriesAD_iterator(SEXP fisheriesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type fisheries(fisheriesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLFisheriesAD_iterator(fisheries, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_as_wrap
FLQuantAD test_FLQuantAD_as_wrap(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_as_wrap(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_basic_constructor
void test_FLQuantAD_basic_constructor();
RcppExport SEXP _FLasherTests_test_FLQuantAD_basic_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_FLQuantAD_basic_constructor();
    return R_NilValue;
END_RCPP
}
// test_FLQuantAD_sexp_constructor
FLQuantAD test_FLQuantAD_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP _FLasherTests_test_FLQuantAD_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_sexp_constructor(flq_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_dim_constructor
FLQuantAD test_FLQuantAD_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP _FLasherTests_test_FLQuantAD_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP);
    Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP);
    Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP);
    Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP);
    Rcpp::traits::input_parameter< int >::type narea(nareaSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_dim_constructor(nquant, nyear, nunit, nseason, narea, niter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_copy_constructor
FLQuantAD test_FLQuantAD_copy_constructor(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_copy_constructor(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_copy_constructor2
Rcpp::List test_FLQuantAD_copy_constructor2(FLQuantAD flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_copy_constructor2(flq1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_assignment_operator
FLQuantAD test_FLQuantAD_assignment_operator(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_assignment_operator(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_assignment_operator2
Rcpp::List test_FLQuantAD_assignment_operator2(FLQuantAD flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_assignment_operator2(flq1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_from_FLQuant_constructor
FLQuantAD test_FLQuantAD_from_FLQuant_constructor(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_from_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_from_FLQuant_constructor(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_units
std::string test_FLQuantAD_get_units(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_units(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_dim
std::vector<unsigned int> test_FLQuantAD_get_dim(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_dim(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_dimnames
Rcpp::List test_FLQuantAD_get_dimnames(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_dimnames(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_size
int test_FLQuantAD_get_size(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_size(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_nquant
int test_FLQuantAD_get_nquant(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_nquant(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_nyear
int test_FLQuantAD_get_nyear(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_nyear(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_nunit
int test_FLQuantAD_get_nunit(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_nunit(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_nseason
int test_FLQuantAD_get_nseason(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_nseason(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_narea
int test_FLQuantAD_get_narea(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_narea(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_niter
int test_FLQuantAD_get_niter(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_niter(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_data_element
int test_FLQuantAD_get_data_element(const FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_data_element(flq, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_const_single_index_accessor
double test_FLQuantAD_get_const_single_index_accessor(const FLQuantAD flq, const int element);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_const_single_index_accessor(flq, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_single_index_accessor
double test_FLQuantAD_get_single_index_accessor(FLQuantAD flq, int element);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_single_index_accessor(flq, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_set_single_index_accessor
FLQuantAD test_FLQuantAD_set_single_index_accessor(FLQuantAD flq, int element, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_set_single_index_accessor(flq, element, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_const_get_accessor
double test_FLQuantAD_const_get_accessor(const FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLQuantAD_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_const_get_accessor(flq, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_accessor
double test_FLQuantAD_get_accessor(FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_accessor(flq, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_set_accessor
FLQuantAD test_FLQuantAD_set_accessor(FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_set_accessor(flq, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_const_indices_accessor
double test_FLQuantAD_get_const_indices_accessor(const FLQuantAD flq, std::vector<unsigned int> indices);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_const_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_const_indices_accessor(flq, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_get_indices_accessor
double test_FLQuantAD_get_indices_accessor(FLQuantAD flq, std::vector<unsigned int> indices);
RcppExport SEXP _FLasherTests_test_FLQuantAD_get_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_get_indices_accessor(flq, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_set_indices_accessor
FLQuantAD test_FLQuantAD_set_indices_accessor(FLQuantAD flq, std::vector<unsigned int> indices, double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_set_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_set_indices_accessor(flq, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_set_dimnames
FLQuantAD test_FLQuantAD_set_dimnames(FLQuantAD flq, Rcpp::List new_dimnames);
RcppExport SEXP _FLasherTests_test_FLQuantAD_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_set_dimnames(flq, new_dimnames));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_match_dims
int test_FLQuantAD_FLQuantAD_match_dims(FLQuantAD flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuantAD_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuantAD_match_dims(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_FLQuant_match_dims
int test_FLQuantAD_FLQuant_match_dims(FLQuantAD flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuantAD_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_FLQuant_match_dims(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuantAD_match_dims
int test_FLQuant_FLQuantAD_match_dims(FLQuant flq1, FLQuantAD flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuantAD_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuantAD_match_dims(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_fill
FLQuantAD test_FLQuantAD_fill(FLQuantAD flq, const double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_fill(SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_fill(flq, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuantAD_fill_double
FLQuantAD test_FLQuantAD_fill_double(FLQuantAD flq, const double value);
RcppExport SEXP _FLasherTests_test_FLQuantAD_fill_double(SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuantAD_fill_double(flq, value));
    return rcpp_result_gen;
END_RCPP
}
// testFLCppAD
void testFLCppAD(double scalar);
RcppExport SEXP _FLasherTests_testFLCppAD(SEXP scalarSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type scalar(scalarSEXP);
    testFLCppAD(scalar);
    return R_NilValue;
END_RCPP
}
// FLPar_units
std::string FLPar_units(SEXP flp);
RcppExport SEXP _FLasherTests_FLPar_units(SEXP flpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flp(flpSEXP);
    rcpp_result_gen = Rcpp::wrap(FLPar_units(flp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_as_wrap
FLQuant test_FLQuant_as_wrap(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_as_wrap(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_basic_constructor
void test_FLQuant_basic_constructor();
RcppExport SEXP _FLasherTests_test_FLQuant_basic_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_FLQuant_basic_constructor();
    return R_NilValue;
END_RCPP
}
// test_FLQuant_sexp_constructor
FLQuant test_FLQuant_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP _FLasherTests_test_FLQuant_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_sexp_constructor(flq_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_dim_constructor
FLQuant test_FLQuant_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP _FLasherTests_test_FLQuant_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP);
    Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP);
    Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP);
    Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP);
    Rcpp::traits::input_parameter< int >::type narea(nareaSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_dim_constructor(nquant, nyear, nunit, nseason, narea, niter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_dim_value_constructor
FLQuant test_FLQuant_dim_value_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_dim_value_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP);
    Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP);
    Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP);
    Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP);
    Rcpp::traits::input_parameter< int >::type narea(nareaSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_dim_value_constructor(nquant, nyear, nunit, nseason, narea, niter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_intvec_dim_constructor
FLQuant test_FLQuant_intvec_dim_constructor(std::vector<unsigned int> dims);
RcppExport SEXP _FLasherTests_test_FLQuant_intvec_dim_constructor(SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_intvec_dim_constructor(dims));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_intvec_dim_value_constructor
FLQuant test_FLQuant_intvec_dim_value_constructor(std::vector<unsigned int> dims, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_intvec_dim_value_constructor(SEXP dimsSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_intvec_dim_value_constructor(dims, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_copy_constructor
FLQuant test_FLQuant_copy_constructor(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_copy_constructor(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_copy_constructor2
Rcpp::List test_FLQuant_copy_constructor2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_copy_constructor2(flq1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_assignment_operator
FLQuant test_FLQuant_assignment_operator(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_assignment_operator(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_assignment_operator2
Rcpp::List test_FLQuant_assignment_operator2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_assignment_operator2(flq1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_from_FLQuantAD_constructor
FLQuant test_FLQuant_from_FLQuantAD_constructor(FLQuantAD flqad);
RcppExport SEXP _FLasherTests_test_FLQuant_from_FLQuantAD_constructor(SEXP flqadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad(flqadSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_from_FLQuantAD_constructor(flqad));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_data
std::vector<double> test_FLQuant_get_data(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_data(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_data(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_units
std::string test_FLQuant_get_units(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_units(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_dim
std::vector<unsigned int> test_FLQuant_get_dim(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_dim(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_dimnames
Rcpp::List test_FLQuant_get_dimnames(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_dimnames(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_dimnames2
Rcpp::List test_FLQuant_get_dimnames2(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_dimnames2(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_dimnames2(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_size
int test_FLQuant_get_size(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_size(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_nquant
int test_FLQuant_get_nquant(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_nquant(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_nyear
int test_FLQuant_get_nyear(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_nyear(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_nunit
int test_FLQuant_get_nunit(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_nunit(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_nseason
int test_FLQuant_get_nseason(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_nseason(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_narea
int test_FLQuant_get_narea(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_narea(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_niter
int test_FLQuant_get_niter(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_niter(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_first_age
int test_FLQuant_get_first_age(const FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant_get_first_age(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_first_age(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_data_element
int test_FLQuant_get_data_element(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLQuant_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_data_element(flq, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_const_single_index_accessor
double test_FLQuant_get_const_single_index_accessor(const FLQuant flq, const int element);
RcppExport SEXP _FLasherTests_test_FLQuant_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_const_single_index_accessor(flq, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_single_index_accessor
double test_FLQuant_get_single_index_accessor(FLQuant flq, int element);
RcppExport SEXP _FLasherTests_test_FLQuant_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_single_index_accessor(flq, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_set_single_index_accessor
FLQuant test_FLQuant_set_single_index_accessor(FLQuant flq, int element, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_set_single_index_accessor(flq, element, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_const_get_accessor
double test_FLQuant_const_get_accessor(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLQuant_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_const_get_accessor(flq, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_accessor
double test_FLQuant_get_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_FLQuant_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_accessor(flq, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_set_accessor
FLQuant test_FLQuant_set_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_set_accessor(flq, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_const_indices_accessor
double test_FLQuant_get_const_indices_accessor(const FLQuant flq, std::vector<unsigned int> indices);
RcppExport SEXP _FLasherTests_test_FLQuant_get_const_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_const_indices_accessor(flq, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_indices_accessor
double test_FLQuant_get_indices_accessor(FLQuant flq, std::vector<unsigned int> indices);
RcppExport SEXP _FLasherTests_test_FLQuant_get_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_indices_accessor(flq, indices));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_set_indices_accessor
FLQuant test_FLQuant_set_indices_accessor(FLQuant flq, std::vector<unsigned int> indices, double value);
RcppExport SEXP _FLasherTests_test_FLQuant_set_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_set_indices_accessor(flq, indices, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_get_all_iters
FLQuant test_FLQuant_get_all_iters(FLQuant flq, int quant, int year, int unit, int season, int area);
RcppExport SEXP _FLasherTests_test_FLQuant_get_all_iters(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_get_all_iters(flq, quant, year, unit, season, area));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_set_data
FLQuant test_FLQuant_set_data(FLQuant flq, std::vector<double> data_in);
RcppExport SEXP _FLasherTests_test_FLQuant_set_data(SEXP flqSEXP, SEXP data_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type data_in(data_inSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_set_data(flq, data_in));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_set_dimnames
FLQuant test_FLQuant_set_dimnames(FLQuant flq, Rcpp::List new_dimnames);
RcppExport SEXP _FLasherTests_test_FLQuant_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_set_dimnames(flq, new_dimnames));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_set_units
FLQuant test_FLQuant_set_units(FLQuant flq, std::string new_units);
RcppExport SEXP _FLasherTests_test_FLQuant_set_units(SEXP flqSEXP, SEXP new_unitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< std::string >::type new_units(new_unitsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_set_units(flq, new_units));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_subset
FLQuant test_FLQuant_subset(FLQuant flq, const int quant_min, const int quant_max, const int year_min, const int year_max, const int unit_min, const int unit_max, const int season_min, const int season_max, const int area_min, const int area_max, const int iter_min, const int iter_max);
RcppExport SEXP _FLasherTests_test_FLQuant_subset(SEXP flqSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP year_minSEXP, SEXP year_maxSEXP, SEXP unit_minSEXP, SEXP unit_maxSEXP, SEXP season_minSEXP, SEXP season_maxSEXP, SEXP area_minSEXP, SEXP area_maxSEXP, SEXP iter_minSEXP, SEXP iter_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const int >::type quant_min(quant_minSEXP);
    Rcpp::traits::input_parameter< const int >::type quant_max(quant_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type year_min(year_minSEXP);
    Rcpp::traits::input_parameter< const int >::type year_max(year_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type unit_min(unit_minSEXP);
    Rcpp::traits::input_parameter< const int >::type unit_max(unit_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type season_min(season_minSEXP);
    Rcpp::traits::input_parameter< const int >::type season_max(season_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type area_min(area_minSEXP);
    Rcpp::traits::input_parameter< const int >::type area_max(area_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type iter_min(iter_minSEXP);
    Rcpp::traits::input_parameter< const int >::type iter_max(iter_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_subset(flq, quant_min, quant_max, year_min, year_max, unit_min, unit_max, season_min, season_max, area_min, area_max, iter_min, iter_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_neat_subset
FLQuant test_FLQuant_neat_subset(FLQuant flq, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_FLQuant_neat_subset(SEXP flqSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_neat_subset(flq, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_propagate_iters
Rcpp::List test_FLQuant_propagate_iters(FLQuant flq, const int iters);
RcppExport SEXP _FLasherTests_test_FLQuant_propagate_iters(SEXP flqSEXP, SEXP itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const int >::type iters(itersSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_propagate_iters(flq, iters));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_fill
FLQuant test_FLQuant_fill(FLQuant flq, const double value);
RcppExport SEXP _FLasherTests_test_FLQuant_fill(SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_fill(flq, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_FLQuant_match_dims
int test_FLQuant_FLQuant_match_dims(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_FLQuant_match_dims(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_FLPar_to_FLQuant
FLQuant test_FLPar_to_FLQuant(SEXP flp);
RcppExport SEXP _FLasherTests_test_FLPar_to_FLQuant(SEXP flpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flp(flpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLPar_to_FLQuant(flp));
    return rcpp_result_gen;
END_RCPP
}
// test_for_range
FLQuant test_for_range(FLQuant flq, double rn);
RcppExport SEXP _FLasherTests_test_for_range(SEXP flqSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< double >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(test_for_range(flq, rn));
    return rcpp_result_gen;
END_RCPP
}
// test_for_range_const
double test_for_range_const(FLQuant flq, double rn);
RcppExport SEXP _FLasherTests_test_for_range_const(SEXP flqSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< double >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(test_for_range_const(flq, rn));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_for_iterator
FLQuant test_FLQuant_for_iterator(FLQuant flq, double rn);
RcppExport SEXP _FLasherTests_test_FLQuant_for_iterator(SEXP flqSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< double >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_for_iterator(flq, rn));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_for_iterator_const
double test_FLQuant_for_iterator_const(FLQuant flq, double rn);
RcppExport SEXP _FLasherTests_test_FLQuant_for_iterator_const(SEXP flqSEXP, SEXP rnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< double >::type rn(rnSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_for_iterator_const(flq, rn));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant_lambda
FLQuant test_FLQuant_lambda(FLQuant flq1, FLQuant flq2);
RcppExport SEXP _FLasherTests_test_FLQuant_lambda(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant_lambda(flq1, flq2));
    return rcpp_result_gen;
END_RCPP
}
// test_DD_pow
FLQuant test_DD_pow(const FLQuant flq, const double power);
RcppExport SEXP _FLasherTests_test_DD_pow(SEXP flqSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(test_DD_pow(flq, power));
    return rcpp_result_gen;
END_RCPP
}
// test_DAD_pow
FLQuantAD test_DAD_pow(const FLQuant flq, const double power);
RcppExport SEXP _FLasherTests_test_DAD_pow(SEXP flqSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(test_DAD_pow(flq, power));
    return rcpp_result_gen;
END_RCPP
}
// test_ADD_pow
FLQuantAD test_ADD_pow(const FLQuantAD flq, const double power);
RcppExport SEXP _FLasherTests_test_ADD_pow(SEXP flqSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ADD_pow(flq, power));
    return rcpp_result_gen;
END_RCPP
}
// test_ADAD_pow
FLQuantAD test_ADAD_pow(const FLQuantAD flq, const double power);
RcppExport SEXP _FLasherTests_test_ADAD_pow(SEXP flqSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ADAD_pow(flq, power));
    return rcpp_result_gen;
END_RCPP
}
// test_input_subsetter_ADAD
FLQuantAD test_input_subsetter_ADAD(FLQuantAD flq1, FLQuantAD flq2, std::vector<unsigned int> indices_min, std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_input_subsetter_ADAD(SEXP flq1SEXP, SEXP flq2SEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_input_subsetter_ADAD(flq1, flq2, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_input_subsetter_DD
FLQuant test_input_subsetter_DD(FLQuant flq1, FLQuant flq2, std::vector<unsigned int> indices_min, std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_input_subsetter_DD(SEXP flq1SEXP, SEXP flq2SEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_input_subsetter_DD(flq1, flq2, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_input_subsetter_ADD
FLQuantAD test_input_subsetter_ADD(FLQuantAD flq1, FLQuant flq2, std::vector<unsigned int> indices_min, std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_input_subsetter_ADD(SEXP flq1SEXP, SEXP flq2SEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_input_subsetter_ADD(flq1, flq2, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_input_subsetter_DAD
FLQuant test_input_subsetter_DAD(FLQuant flq1, FLQuantAD flq2, std::vector<unsigned int> indices_min, std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_input_subsetter_DAD(SEXP flq1SEXP, SEXP flq2SEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_input_subsetter_DAD(flq1, flq2, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_year_season_to_timestep_FLQuant_double
unsigned int test_year_season_to_timestep_FLQuant_double(FLQuant flq, const unsigned int year, const unsigned int season);
RcppExport SEXP _FLasherTests_test_year_season_to_timestep_FLQuant_double(SEXP flqSEXP, SEXP yearSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type season(seasonSEXP);
    rcpp_result_gen = Rcpp::wrap(test_year_season_to_timestep_FLQuant_double(flq, year, season));
    return rcpp_result_gen;
END_RCPP
}
// test_year_season_to_timestep_FLQuant_adouble
unsigned int test_year_season_to_timestep_FLQuant_adouble(FLQuantAD flqad, const unsigned int year, const unsigned int season);
RcppExport SEXP _FLasherTests_test_year_season_to_timestep_FLQuant_adouble(SEXP flqadSEXP, SEXP yearSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad(flqadSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type season(seasonSEXP);
    rcpp_result_gen = Rcpp::wrap(test_year_season_to_timestep_FLQuant_adouble(flqad, year, season));
    return rcpp_result_gen;
END_RCPP
}
// test_year_season_to_timestep
unsigned int test_year_season_to_timestep(FLQuant flq, const int unsigned year, const int unsigned season);
RcppExport SEXP _FLasherTests_test_year_season_to_timestep(SEXP flqSEXP, SEXP yearSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const int unsigned >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int unsigned >::type season(seasonSEXP);
    rcpp_result_gen = Rcpp::wrap(test_year_season_to_timestep(flq, year, season));
    return rcpp_result_gen;
END_RCPP
}
// test_timestep_to_year_season_FLQuant_double
Rcpp::IntegerVector test_timestep_to_year_season_FLQuant_double(FLQuant flq, const unsigned int timestep);
RcppExport SEXP _FLasherTests_test_timestep_to_year_season_FLQuant_double(SEXP flqSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type timestep(timestepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_timestep_to_year_season_FLQuant_double(flq, timestep));
    return rcpp_result_gen;
END_RCPP
}
// test_timestep_to_year_season_FLQuant_adouble
Rcpp::IntegerVector test_timestep_to_year_season_FLQuant_adouble(FLQuantAD flqad, const unsigned int timestep);
RcppExport SEXP _FLasherTests_test_timestep_to_year_season_FLQuant_adouble(SEXP flqadSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flqad(flqadSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type timestep(timestepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_timestep_to_year_season_FLQuant_adouble(flqad, timestep));
    return rcpp_result_gen;
END_RCPP
}
// test_timestep_to_year_season
Rcpp::IntegerVector test_timestep_to_year_season(FLQuant flq, const unsigned int timestep);
RcppExport SEXP _FLasherTests_test_timestep_to_year_season(SEXP flqSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type timestep(timestepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_timestep_to_year_season(flq, timestep));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_as_wrap
FLQuant7 test_FLQuant7_as_wrap(FLQuant7 flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_as_wrap(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_empty_wrap
FLQuant7 test_FLQuant7_empty_wrap();
RcppExport SEXP _FLasherTests_test_FLQuant7_empty_wrap() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_empty_wrap());
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_basic_constructor
void test_FLQuant7_basic_constructor();
RcppExport SEXP _FLasherTests_test_FLQuant7_basic_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_FLQuant7_basic_constructor();
    return R_NilValue;
END_RCPP
}
// test_FLQuant7_sexp_constructor
FLQuant7 test_FLQuant7_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP _FLasherTests_test_FLQuant7_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_sexp_constructor(flq_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_FLQuant_constructor
FLQuant7 test_FLQuant7_FLQuant_constructor(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant7_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_FLQuant_constructor(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_copy_constructor
FLQuant7 test_FLQuant7_copy_constructor(FLQuant7 flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_copy_constructor(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_copy_constructor2
Rcpp::List test_FLQuant7_copy_constructor2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant7_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP);
    Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_assignment_operator
FLQuant7 test_FLQuant7_assignment_operator(FLQuant7 flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_assignment_operator(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_assignment_operator2
Rcpp::List test_FLQuant7_assignment_operator2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant7_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP);
    Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_function_operator
FLQuant7 test_FLQuant7_function_operator(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant7_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_function_operator(flq7, flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_get_ndim7
int test_FLQuant7_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP _FLasherTests_test_FLQuant7_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_get_ndim7(flq_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_const_get_single_index_accessor
FLQuant test_FLQuant7_const_get_single_index_accessor(const FLQuant7 flq7, const int element);
RcppExport SEXP _FLasherTests_test_FLQuant7_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_const_get_single_index_accessor(flq7, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_get_single_index_accessor
FLQuant test_FLQuant7_get_single_index_accessor(FLQuant7 flq7, const int element);
RcppExport SEXP _FLasherTests_test_FLQuant7_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_get_single_index_accessor(flq7, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_set_single_index_accessor
FLQuant7 test_FLQuant7_set_single_index_accessor(FLQuant7 flq7, const int element, const FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant7_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_set_single_index_accessor(flq7, element, flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_const_get_accessor
double test_FLQuant7_const_get_accessor(const FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_get_accessor
double test_FLQuant7_get_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_get_accessor(flq7, dim7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_set_accessor
FLQuant7 test_FLQuant7_set_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP _FLasherTests_test_FLQuant7_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_const_default_dim7_get_accessor
FLQuant test_FLQuant7_const_default_dim7_get_accessor(const FLQuant7 flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7_const_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_const_default_dim7_get_accessor(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_default_dim7_get_accessor
FLQuant test_FLQuant7_default_dim7_get_accessor(FLQuant7 flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_default_dim7_get_accessor(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_default_dim7_set_accessor
FLQuant7 test_FLQuant7_default_dim7_set_accessor(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQuant7_default_dim7_set_accessor(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_default_dim7_set_accessor(flq7, flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_const_default_dim7_get_accessor_multi
double test_FLQuant7_const_default_dim7_get_accessor_multi(const FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7_const_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_const_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_default_dim7_get_accessor_multi
double test_FLQuant7_default_dim7_get_accessor_multi(FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7_default_dim7_set_accessor_multi
FLQuant7 test_FLQuant7_default_dim7_set_accessor_multi(FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP _FLasherTests_test_FLQuant7_default_dim7_set_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7_default_dim7_set_accessor_multi(flq7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_as_wrap
FLQuant7AD test_FLQuant7AD_as_wrap(FLQuant7AD flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_as_wrap(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_empty_wrap
FLQuant7AD test_FLQuant7AD_empty_wrap();
RcppExport SEXP _FLasherTests_test_FLQuant7AD_empty_wrap() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_empty_wrap());
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_basic_constructor
void test_FLQuant7AD_basic_constructor();
RcppExport SEXP _FLasherTests_test_FLQuant7AD_basic_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_FLQuant7AD_basic_constructor();
    return R_NilValue;
END_RCPP
}
// test_FLQuant7AD_sexp_constructor
FLQuant7AD test_FLQuant7AD_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_sexp_constructor(flq_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_FLQuant_constructor
FLQuant7AD test_FLQuant7AD_FLQuant_constructor(FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_FLQuant_constructor(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_copy_constructor
FLQuant7AD test_FLQuant7AD_copy_constructor(FLQuant7AD flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_copy_constructor(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_copy_constructor2
Rcpp::List test_FLQuant7AD_copy_constructor2(FLQuant7AD flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq71(flq71SEXP);
    Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_assignment_operator
FLQuant7AD test_FLQuant7AD_assignment_operator(FLQuant7AD flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_assignment_operator(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_assignment_operator2
Rcpp::List test_FLQuant7AD_assignment_operator2(FLQuant7AD flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq71(flq71SEXP);
    Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_function_operator
FLQuant7AD test_FLQuant7AD_function_operator(FLQuant7AD flq7, FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_function_operator(flq7, flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_get_ndim7
int test_FLQuant7AD_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_get_ndim7(flq_sexp1));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_const_get_single_index_accessor
FLQuantAD test_FLQuant7AD_const_get_single_index_accessor(const FLQuant7AD flq7, const int element);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_const_get_single_index_accessor(flq7, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_get_single_index_accessor
FLQuantAD test_FLQuant7AD_get_single_index_accessor(FLQuant7AD flq7, const int element);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_get_single_index_accessor(flq7, element));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_set_single_index_accessor
FLQuant7AD test_FLQuant7AD_set_single_index_accessor(FLQuant7AD flq7, const int element, const FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_set_single_index_accessor(flq7, element, flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_const_get_accessor
double test_FLQuant7AD_const_get_accessor(const FLQuant7AD flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_get_accessor
double test_FLQuant7AD_get_accessor(FLQuant7AD flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_get_accessor(flq7, dim7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_set_accessor
FLQuant7AD test_FLQuant7AD_set_accessor(FLQuant7AD flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_const_default_dim7_get_accessor
FLQuantAD test_FLQuant7AD_const_default_dim7_get_accessor(const FLQuant7AD flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_const_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_const_default_dim7_get_accessor(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_default_dim7_get_accessor
FLQuantAD test_FLQuant7AD_default_dim7_get_accessor(FLQuant7AD flq7);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_default_dim7_get_accessor(flq7));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_default_dim7_set_accessor
FLQuant7AD test_FLQuant7AD_default_dim7_set_accessor(FLQuant7AD flq7, FLQuantAD flq);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_default_dim7_set_accessor(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_default_dim7_set_accessor(flq7, flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_const_default_dim7_get_accessor_multi
double test_FLQuant7AD_const_default_dim7_get_accessor_multi(const FLQuant7AD flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_const_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_const_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_default_dim7_get_accessor_multi
double test_FLQuant7AD_default_dim7_get_accessor_multi(FLQuant7AD flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQuant7AD_default_dim7_set_accessor_multi
FLQuant7AD test_FLQuant7AD_default_dim7_set_accessor_multi(FLQuant7AD flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP _FLasherTests_test_FLQuant7AD_default_dim7_set_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP);
    Rcpp::traits::input_parameter< const int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< const int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< const int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQuant7AD_default_dim7_set_accessor_multi(flq7, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLQ_in_FLS
FLQuant test_FLQ_in_FLS(FLQuant flq);
RcppExport SEXP _FLasherTests_test_FLQ_in_FLS(SEXP flqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLQ_in_FLS(flq));
    return rcpp_result_gen;
END_RCPP
}
// test_FLStock_sexp_constructor
FLQuant test_FLStock_sexp_constructor(SEXP fls_sexp);
RcppExport SEXP _FLasherTests_test_FLStock_sexp_constructor(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLStock_sexp_constructor(fls_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLStock_wrap
FLStock test_FLStock_wrap(SEXP fls_sexp);
RcppExport SEXP _FLasherTests_test_FLStock_wrap(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLStock_wrap(fls_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_FLStock_as
FLQuant test_FLStock_as(FLStock fls);
RcppExport SEXP _FLasherTests_test_FLStock_as(SEXP flsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLStock_as(fls));
    return rcpp_result_gen;
END_RCPP
}
// test_FLStock_as_wrap
FLStock test_FLStock_as_wrap(FLStock fls);
RcppExport SEXP _FLasherTests_test_FLStock_as_wrap(SEXP flsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLStock_as_wrap(fls));
    return rcpp_result_gen;
END_RCPP
}
// test_FLStock_copy_constructor
Rcpp::List test_FLStock_copy_constructor(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLStock_copy_constructor(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLStock_copy_constructor(fls1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_FLStock_assignment_operator
Rcpp::List test_FLStock_assignment_operator(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_FLStock_assignment_operator(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_FLStock_assignment_operator(fls1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_sexp_constructor
fwdBiol test_fwdBiol_sexp_constructor(SEXP flb_sexp);
RcppExport SEXP _FLasherTests_test_fwdBiol_sexp_constructor(SEXP flb_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_sexp_constructor(flb_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_sexp_constructor
fwdBiolAD test_fwdBiolAD_sexp_constructor(SEXP flb_sexp);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_sexp_constructor(SEXP flb_sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_sexp_constructor(flb_sexp));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_as_wrap
fwdBiol test_fwdBiol_as_wrap(fwdBiol fwdb);
RcppExport SEXP _FLasherTests_test_fwdBiol_as_wrap(SEXP fwdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_as_wrap(fwdb));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_as_wrap
fwdBiolAD test_fwdBiolAD_as_wrap(fwdBiolAD fwdb);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_as_wrap(SEXP fwdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_as_wrap(fwdb));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_fwdSR_constructor
Rcpp::List test_fwdBiol_fwdSR_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiol_fwdSR_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_fwdSR_constructor(flb_sexp, model_name, params, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_fwdSRAD_constructor
Rcpp::List test_fwdBiolAD_fwdSRAD_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_fwdSRAD_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_fwdSRAD_constructor(flb_sexp, model_name, params, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_FLSR_bits_constructor
Rcpp::List test_fwdBiol_FLSR_bits_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiol_FLSR_bits_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_FLSR_bits_constructor(flb_sexp, model_name, params, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_FLSR_residuals_constructor
Rcpp::List test_fwdBiolAD_FLSR_residuals_constructor(SEXP flb_sexp, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_FLSR_residuals_constructor(SEXP flb_sexpSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_FLSR_residuals_constructor(flb_sexp, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_FLSR_bits_constructor
Rcpp::List test_fwdBiolAD_FLSR_bits_constructor(SEXP flb_sexp, const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_FLSR_bits_constructor(SEXP flb_sexpSEXP, SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_FLSR_bits_constructor(flb_sexp, model_name, params, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_copy_constructor
fwdBiol test_fwdBiol_copy_constructor(fwdBiol fwdb1);
RcppExport SEXP _FLasherTests_test_fwdBiol_copy_constructor(SEXP fwdb1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_copy_constructor(fwdb1));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_copy_constructor
fwdBiolAD test_fwdBiolAD_copy_constructor(fwdBiolAD fwdb1);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_copy_constructor(SEXP fwdb1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb1(fwdb1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_copy_constructor(fwdb1));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_copy_constructor2
Rcpp::List test_fwdBiol_copy_constructor2(fwdBiol fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiol_copy_constructor2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_copy_constructor2(fwdb1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_copy_constructor2
Rcpp::List test_fwdBiolAD_copy_constructor2(fwdBiolAD fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_copy_constructor2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb1(fwdb1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_copy_constructor2(fwdb1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_assignment_operator
fwdBiol test_fwdBiol_assignment_operator(fwdBiol fwdb1);
RcppExport SEXP _FLasherTests_test_fwdBiol_assignment_operator(SEXP fwdb1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_assignment_operator(fwdb1));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_assignment_operator
fwdBiolAD test_fwdBiolAD_assignment_operator(fwdBiolAD fwdb1);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_assignment_operator(SEXP fwdb1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb1(fwdb1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_assignment_operator(fwdb1));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_assignment_operator2
Rcpp::List test_fwdBiol_assignment_operator2(fwdBiol fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiol_assignment_operator2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb1(fwdb1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_assignment_operator2(fwdb1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_assignment_operator2
Rcpp::List test_fwdBiolAD_assignment_operator2(fwdBiolAD fwdb1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_assignment_operator2(SEXP fwdb1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb1(fwdb1SEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_assignment_operator2(fwdb1, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_const_get_accessors
Rcpp::NumericVector test_fwdBiol_const_get_accessors(const fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiol_const_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiol >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_const_get_accessors(fwdb, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_const_get_accessors_subset
Rcpp::List test_fwdBiol_const_get_accessors_subset(const fwdBiol fwdb, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_fwdBiol_const_get_accessors_subset(SEXP fwdbSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiol >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_const_get_accessors_subset(fwdb, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_get_accessors
Rcpp::NumericVector test_fwdBiol_get_accessors(fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiol_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_get_accessors(fwdb, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_const_get_accessors
Rcpp::NumericVector test_fwdBiolAD_const_get_accessors(const fwdBiolAD fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_const_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiolAD >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_const_get_accessors(fwdb, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_get_accessors
Rcpp::NumericVector test_fwdBiolAD_get_accessors(fwdBiolAD fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_get_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_get_accessors(fwdb, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_set_accessors
fwdBiol test_fwdBiol_set_accessors(fwdBiol fwdb, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP _FLasherTests_test_fwdBiol_set_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_set_accessors(fwdb, quant, year, unit, season, area, iter, values));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_set_accessors
fwdBiolAD test_fwdBiolAD_set_accessors(fwdBiolAD fwdb, int quant, int year, int unit, int season, int area, int iter, Rcpp::NumericVector values);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_set_accessors(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_set_accessors(fwdb, quant, year, unit, season, area, iter, values));
    return rcpp_result_gen;
END_RCPP
}
// fwdBiolAD_biomass_FLQ
FLQuantAD fwdBiolAD_biomass_FLQ(fwdBiolAD fwdb);
RcppExport SEXP _FLasherTests_fwdBiolAD_biomass_FLQ(SEXP fwdbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    rcpp_result_gen = Rcpp::wrap(fwdBiolAD_biomass_FLQ(fwdb));
    return rcpp_result_gen;
END_RCPP
}
// fwdBiolAD_biomass_subset
FLQuantAD fwdBiolAD_biomass_subset(fwdBiolAD fwdb, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_fwdBiolAD_biomass_subset(SEXP fwdbSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(fwdBiolAD_biomass_subset(fwdb, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_n_direct_set_accessor
fwdBiolAD test_fwdBiolAD_n_direct_set_accessor(fwdBiolAD fwdb, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_n_direct_set_accessor(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_n_direct_set_accessor(fwdb, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolAD_n_direct_get_accessor
double test_fwdBiolAD_n_direct_get_accessor(fwdBiolAD fwdb, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiolAD_n_direct_get_accessor(SEXP fwdbSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolAD >::type fwdb(fwdbSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolAD_n_direct_get_accessor(fwdb, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiol_srp_timelag
unsigned int test_fwdBiol_srp_timelag(fwdBiol fwb);
RcppExport SEXP _FLasherTests_test_fwdBiol_srp_timelag(SEXP fwbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiol >::type fwb(fwbSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiol_srp_timelag(fwb));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiols_as_wrap
fwdBiols test_fwdBiols_as_wrap(const fwdBiols biols_in);
RcppExport SEXP _FLasherTests_test_fwdBiols_as_wrap(SEXP biols_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiols >::type biols_in(biols_inSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiols_as_wrap(biols_in));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_as_wrap
fwdBiolsAD test_fwdBiolsAD_as_wrap(const fwdBiolsAD biols_in);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_as_wrap(SEXP biols_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols_in(biols_inSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_as_wrap(biols_in));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_fwdBiolAD_constructor
fwdBiolsAD test_fwdBiolsAD_fwdBiolAD_constructor(SEXP flb_sexp, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_fwdBiolAD_constructor(SEXP flb_sexpSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_fwdBiolAD_constructor(flb_sexp, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_const_get_single_index_accessor
fwdBiolAD test_fwdBiolsAD_const_get_single_index_accessor(const fwdBiolsAD fwbs, const int element);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_const_get_single_index_accessor(SEXP fwbsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_const_get_single_index_accessor(fwbs, element));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_get_single_index_accessor
fwdBiolAD test_fwdBiolsAD_get_single_index_accessor(fwdBiolsAD fwbs, const int element);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_get_single_index_accessor(SEXP fwbsSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_get_single_index_accessor(fwbs, element));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_const_get_value_accessor
double test_fwdBiolsAD_const_get_value_accessor(const fwdBiolsAD fwbs, const int biol_no, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_const_get_value_accessor(SEXP fwbsSEXP, SEXP biol_noSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_const_get_value_accessor(fwbs, biol_no, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_get_value_accessor
double test_fwdBiolsAD_get_value_accessor(fwdBiolsAD fwbs, const int biol_no, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_get_value_accessor(SEXP fwbsSEXP, SEXP biol_noSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_get_value_accessor(fwbs, biol_no, quant, year, unit, season, area, iter));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_set_single_index_accessor
fwdBiolsAD test_fwdBiolsAD_set_single_index_accessor(fwdBiolsAD fwbs, const int element, SEXP flb_sexp, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_set_single_index_accessor(SEXP fwbsSEXP, SEXP elementSEXP, SEXP flb_sexpSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< const int >::type element(elementSEXP);
    Rcpp::traits::input_parameter< SEXP >::type flb_sexp(flb_sexpSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_set_single_index_accessor(fwbs, element, flb_sexp, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_set_value_accessor
fwdBiolsAD test_fwdBiolsAD_set_value_accessor(fwdBiolsAD fwbs, const int biol_no, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_set_value_accessor(SEXP fwbsSEXP, SEXP biol_noSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_set_value_accessor(fwbs, biol_no, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_copy_constructor
Rcpp::List test_fwdBiolsAD_copy_constructor(fwdBiolsAD fwbs1, const int biol_no, const std::vector<int> dims, const double value);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_copy_constructor(SEXP fwbs1SEXP, SEXP biol_noSEXP, SEXP dimsSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs1(fwbs1SEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_copy_constructor(fwbs1, biol_no, dims, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_assignment_operator
Rcpp::List test_fwdBiolsAD_assignment_operator(fwdBiolsAD fwbs1, const int biol_no, const std::vector<int> dims, const double value);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_assignment_operator(SEXP fwbs1SEXP, SEXP biol_noSEXP, SEXP dimsSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs1(fwbs1SEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_assignment_operator(fwbs1, biol_no, dims, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_const_iterator
Rcpp::List test_fwdBiolsAD_const_iterator(const fwdBiolsAD fwbs);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_const_iterator(SEXP fwbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type fwbs(fwbsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_const_iterator(fwbs));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdBiolsAD_iterator
fwdBiolsAD test_fwdBiolsAD_iterator(fwdBiolsAD fwbs, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP _FLasherTests_test_fwdBiolsAD_iterator(SEXP fwbsSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdBiolsAD >::type fwbs(fwbsSEXP);
    Rcpp::traits::input_parameter< int >::type quant(quantSEXP);
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< int >::type season(seasonSEXP);
    Rcpp::traits::input_parameter< int >::type area(areaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdBiolsAD_iterator(fwbs, quant, year, unit, season, area, iter, value));
    return rcpp_result_gen;
END_RCPP
}
// test_as_wrap_fwdControl
fwdControl test_as_wrap_fwdControl(fwdControl control);
RcppExport SEXP _FLasherTests_test_as_wrap_fwdControl(SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdControl >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_as_wrap_fwdControl(control));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_copy_constructor
Rcpp::List test_fwdControl_copy_constructor(fwdControl fc1);
RcppExport SEXP _FLasherTests_test_fwdControl_copy_constructor(SEXP fc1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdControl >::type fc1(fc1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_copy_constructor(fc1));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_assignment_operator
fwdControl test_fwdControl_assignment_operator(fwdControl fc);
RcppExport SEXP _FLasherTests_test_fwdControl_assignment_operator(SEXP fcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< fwdControl >::type fc(fcSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_assignment_operator(fc));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target
Rcpp::DataFrame test_fwdControl_get_target(const fwdControl control);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target(SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target(control));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_ntarget
int test_fwdControl_get_ntarget(const fwdControl control);
RcppExport SEXP _FLasherTests_test_fwdControl_get_ntarget(SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_ntarget(control));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_niter
int test_fwdControl_get_niter(const fwdControl control);
RcppExport SEXP _FLasherTests_test_fwdControl_get_niter(SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_niter(control));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_nsim_target
int test_fwdControl_get_nsim_target(const fwdControl control, unsigned int target_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_nsim_target(SEXP controlSEXP, SEXP target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type target_no(target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_nsim_target(control, target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_row
int test_fwdControl_get_target_row(const fwdControl control, unsigned int target_no, unsigned int sim_target_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_row(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_target_no(sim_target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_row(control, target_no, sim_target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_rows
std::vector<unsigned int> test_fwdControl_get_target_rows(const fwdControl control, unsigned int target_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_rows(SEXP controlSEXP, SEXP target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type target_no(target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_rows(control, target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_int_col
Rcpp::IntegerVector test_fwdControl_get_target_int_col(const fwdControl control, const int target_no, const std::string col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_int_col(SEXP controlSEXP, SEXP target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_int_col(control, target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_int_col2
int test_fwdControl_get_target_int_col2(const fwdControl control, const int target_no, const int sim_target_no, const std::string col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_int_col2(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_int_col2(control, target_no, sim_target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_list_int_col
Rcpp::List test_fwdControl_get_target_list_int_col(const fwdControl control, const int target_no, const std::string col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_list_int_col(SEXP controlSEXP, SEXP target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_list_int_col(control, target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_list_int_col2
Rcpp::IntegerVector test_fwdControl_get_target_list_int_col2(const fwdControl control, const int target_no, const int sim_target_no, const std::string col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_list_int_col2(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_list_int_col2(control, target_no, sim_target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_num_col
Rcpp::NumericVector test_fwdControl_get_target_num_col(const fwdControl control, const int target_no, const std::string col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_num_col(SEXP controlSEXP, SEXP target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_num_col(control, target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_num_col2
double test_fwdControl_get_target_num_col2(const fwdControl control, const int target_no, const int sim_target_no, const std::string col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_num_col2(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_num_col2(control, target_no, sim_target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_value
std::vector<double> test_fwdControl_get_target_value(const fwdControl control, const int target_no, const int col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_value(SEXP controlSEXP, SEXP target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_value(control, target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_value2
std::vector<double> test_fwdControl_get_target_value2(const fwdControl control, const int target_no, const int sim_target_no, const int col);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_value2(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_value2(control, target_no, sim_target_no, col));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_target_quantity
std::string test_fwdControl_get_target_quantity(const fwdControl control, const int target_no, const int sim_target_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_target_quantity(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_target_quantity(control, target_no, sim_target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_age_range
std::vector<unsigned int> test_fwdControl_get_age_range(const fwdControl control, const int target_no, const int sim_target_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_age_range(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_age_range(control, target_no, sim_target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_FC
Rcpp::IntegerMatrix test_fwdControl_get_FC(const fwdControl control, const int biol_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_FC(SEXP controlSEXP, SEXP biol_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_FC(control, biol_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_B
std::vector<unsigned int> test_fwdControl_get_B(const fwdControl control, const int fishery_no, const int catch_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_B(SEXP controlSEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type catch_no(catch_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_B(control, fishery_no, catch_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_F
std::vector<unsigned int> test_fwdControl_get_F(const fwdControl control, const int biol_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_F(SEXP controlSEXP, SEXP biol_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_F(control, biol_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_FCB_nrow
int test_fwdControl_get_FCB_nrow(const fwdControl control);
RcppExport SEXP _FLasherTests_test_fwdControl_get_FCB_nrow(SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_FCB_nrow(control));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_FCB_row_no
int test_fwdControl_get_FCB_row_no(const fwdControl control, const unsigned int fishery_no, const unsigned int catch_no, const unsigned int biol_no);
RcppExport SEXP _FLasherTests_test_fwdControl_get_FCB_row_no(SEXP controlSEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP, SEXP biol_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type catch_no(catch_noSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type biol_no(biol_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_FCB_row_no(control, fishery_no, catch_no, biol_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_get_FCB_nos
std::vector<int> test_fwdControl_get_FCB_nos(const fwdControl control, const unsigned int target_no, const unsigned int sim_target_no, const bool relative, const bool check);
RcppExport SEXP _FLasherTests_test_fwdControl_get_FCB_nos(SEXP controlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP, SEXP relativeSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type sim_target_no(sim_target_noSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< const bool >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_get_FCB_nos(control, target_no, sim_target_no, relative, check));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdControl_shared_catch
bool test_fwdControl_shared_catch(const fwdControl control, const unsigned int biol_no);
RcppExport SEXP _FLasherTests_test_fwdControl_shared_catch(SEXP controlSEXP, SEXP biol_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const fwdControl >::type control(controlSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type biol_no(biol_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdControl_shared_catch(control, biol_no));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_empty_constructor
void test_fwdSR_empty_constructor();
RcppExport SEXP _FLasherTests_test_fwdSR_empty_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_fwdSR_empty_constructor();
    return R_NilValue;
END_RCPP
}
// test_fwdSR_constructor_wrap
fwdSR test_fwdSR_constructor_wrap(const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdSR_constructor_wrap(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_constructor_wrap(model_name, params, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_get_nparams
int test_fwdSR_get_nparams(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult);
RcppExport SEXP _FLasherTests_test_fwdSR_get_nparams(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_get_nparams(model_name, params, residuals, residuals_mult));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_eval
double test_fwdSR_eval(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const double srp, const std::vector<unsigned int> param_indices);
RcppExport SEXP _FLasherTests_test_fwdSR_eval(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP srpSEXP, SEXP param_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    Rcpp::traits::input_parameter< const double >::type srp(srpSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type param_indices(param_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_eval(model_name, params, residuals, residuals_mult, srp, param_indices));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_get_params
std::vector<double> test_fwdSR_get_params(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const std::vector<unsigned int> param_indices);
RcppExport SEXP _FLasherTests_test_fwdSR_get_params(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP param_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type param_indices(param_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_get_params(model_name, params, residuals, residuals_mult, param_indices));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_copy_constructor
Rcpp::List test_fwdSR_copy_constructor(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const double srp);
RcppExport SEXP _FLasherTests_test_fwdSR_copy_constructor(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP srpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    Rcpp::traits::input_parameter< const double >::type srp(srpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_copy_constructor(model_name, params, residuals, residuals_mult, srp));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_assignment_operator
Rcpp::List test_fwdSR_assignment_operator(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const double srp);
RcppExport SEXP _FLasherTests_test_fwdSR_assignment_operator(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP srpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    Rcpp::traits::input_parameter< const double >::type srp(srpSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_assignment_operator(model_name, params, residuals, residuals_mult, srp));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_predict_recruitment
FLQuant test_fwdSR_predict_recruitment(std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, const FLQuant srp, const std::vector<unsigned int> initial_params_indices);
RcppExport SEXP _FLasherTests_test_fwdSR_predict_recruitment(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP srpSEXP, SEXP initial_params_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type srp(srpSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type initial_params_indices(initial_params_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_predict_recruitment(model_name, params, residuals, residuals_mult, srp, initial_params_indices));
    return rcpp_result_gen;
END_RCPP
}
// test_fwdSR_does_recruitment_happen
bool test_fwdSR_does_recruitment_happen(const std::string model_name, const FLQuant params, const FLQuant residuals, const bool residuals_mult, unsigned int unit, unsigned int year, unsigned int season);
RcppExport SEXP _FLasherTests_test_fwdSR_does_recruitment_happen(SEXP model_nameSEXP, SEXP paramsSEXP, SEXP residualsSEXP, SEXP residuals_multSEXP, SEXP unitSEXP, SEXP yearSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type model_name(model_nameSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const FLQuant >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const bool >::type residuals_mult(residuals_multSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type season(seasonSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fwdSR_does_recruitment_happen(model_name, params, residuals, residuals_mult, unit, year, season));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_empty_constructor
void test_operatingModel_empty_constructor();
RcppExport SEXP _FLasherTests_test_operatingModel_empty_constructor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_operatingModel_empty_constructor();
    return R_NilValue;
END_RCPP
}
// test_operatingModel_full_constructor
operatingModel test_operatingModel_full_constructor(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl);
RcppExport SEXP _FLasherTests_test_operatingModel_full_constructor(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_full_constructor(flfs, biols, ctrl));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_niter
unsigned int test_operatingModel_get_niter(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl);
RcppExport SEXP _FLasherTests_test_operatingModel_get_niter(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_niter(flfs, biols, ctrl));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_exp_z_pre_spwn
FLQuantAD test_operatingModel_get_exp_z_pre_spwn(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_get_exp_z_pre_spwn(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_exp_z_pre_spwn(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_f_prop_spwn_FLQ_subset
FLQuantAD test_operatingModel_f_prop_spwn_FLQ_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int fishery_no, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_f_prop_spwn_FLQ_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP fishery_noSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_f_prop_spwn_FLQ_subset(flfs, biols, ctrl, fishery_no, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_SRP_FLQ_subset
FLQuantAD test_operatingModel_SRP_FLQ_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_SRP_FLQ_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_SRP_FLQ_subset(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_total_SRP_FLQ_subset
FLQuantAD test_operatingModel_total_SRP_FLQ_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_total_SRP_FLQ_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_total_SRP_FLQ_subset(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_calc_rec
std::vector<double> test_operatingModel_calc_rec(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const int unit, const int rec_timestep);
RcppExport SEXP _FLasherTests_test_operatingModel_calc_rec(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP unitSEXP, SEXP rec_timestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const int >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const int >::type rec_timestep(rec_timestepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_calc_rec(flfs, biols, ctrl, biol_no, unit, rec_timestep));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_f_FCB
FLQuantAD test_operatingModel_get_f_FCB(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int fishery_no, const int catch_no, const int biol_no);
RcppExport SEXP _FLasherTests_test_operatingModel_get_f_FCB(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP, SEXP biol_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type catch_no(catch_noSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_f_FCB(flfs, biols, ctrl, fishery_no, catch_no, biol_no));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_f_FCB_subset
FLQuantAD test_operatingModel_get_f_FCB_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int fishery_no, const int catch_no, const int biol_no, std::vector<unsigned int> indices_min, std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_get_f_FCB_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type catch_no(catch_noSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_f_FCB_subset(flfs, biols, ctrl, fishery_no, catch_no, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_f_B_subset
FLQuantAD test_operatingModel_get_f_B_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_get_f_B_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_f_B_subset(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_f_B
FLQuantAD test_operatingModel_get_f_B(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no);
RcppExport SEXP _FLasherTests_test_operatingModel_get_f_B(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_f_B(flfs, biols, ctrl, biol_no));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_fbar_FCB
FLQuantAD test_operatingModel_fbar_FCB(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int fishery_no, const int catch_no, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_fbar_FCB(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type catch_no(catch_noSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_fbar_FCB(flfs, biols, ctrl, fishery_no, catch_no, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_fbar_B
FLQuantAD test_operatingModel_fbar_B(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_fbar_B(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_fbar_B(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_nunit_z_subset
FLQuantAD test_operatingModel_nunit_z_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_nunit_z_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_nunit_z_subset(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_nunit_f_B_subset
FLQuantAD test_operatingModel_nunit_f_B_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_nunit_f_B_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_nunit_f_B_subset(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_nunit_f_FCB_subset
FLQuantAD test_operatingModel_nunit_f_FCB_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int fishery_no, const int catch_no, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_nunit_f_FCB_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type catch_no(catch_noSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_nunit_f_FCB_subset(flfs, biols, ctrl, fishery_no, catch_no, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_survivors
FLQuantAD test_operatingModel_survivors(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_survivors(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_survivors(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_project_biols
operatingModel test_operatingModel_project_biols(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int timestep);
RcppExport SEXP _FLasherTests_test_operatingModel_project_biols(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_project_biols(flfs, biols, ctrl, timestep));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_project_fisheries
operatingModel test_operatingModel_project_fisheries(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int timestep);
RcppExport SEXP _FLasherTests_test_operatingModel_project_fisheries(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP timestepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type timestep(timestepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_project_fisheries(flfs, biols, ctrl, timestep));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_run
operatingModel test_operatingModel_run(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const double effort_mult_initial, const double indep_min, const double indep_max, const int nr_iters);
RcppExport SEXP _FLasherTests_test_operatingModel_run(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP effort_mult_initialSEXP, SEXP indep_minSEXP, SEXP indep_maxSEXP, SEXP nr_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const double >::type effort_mult_initial(effort_mult_initialSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_min(indep_minSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_max(indep_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nr_iters(nr_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_run(flfs, biols, ctrl, effort_mult_initial, indep_min, indep_max, nr_iters));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_run2
Rcpp::List test_operatingModel_run2(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const double effort_mult_initial, const double indep_min, const double indep_max, const int nr_iters);
RcppExport SEXP _FLasherTests_test_operatingModel_run2(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP effort_mult_initialSEXP, SEXP indep_minSEXP, SEXP indep_maxSEXP, SEXP nr_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const double >::type effort_mult_initial(effort_mult_initialSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_min(indep_minSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_max(indep_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nr_iters(nr_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_run2(flfs, biols, ctrl, effort_mult_initial, indep_min, indep_max, nr_iters));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_eval_om
FLQuantAD test_operatingModel_eval_om(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const std::string strquantity, const int fishery_no, const int catch_no, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_eval_om(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP strquantitySEXP, SEXP fishery_noSEXP, SEXP catch_noSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const std::string >::type strquantity(strquantitySEXP);
    Rcpp::traits::input_parameter< const int >::type fishery_no(fishery_noSEXP);
    Rcpp::traits::input_parameter< const int >::type catch_no(catch_noSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_eval_om(flfs, biols, ctrl, strquantity, fishery_no, catch_no, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_target_value_hat
std::vector<double> test_operatingModel_get_target_value_hat(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int target_no, const int sim_target_no);
RcppExport SEXP _FLasherTests_test_operatingModel_get_target_value_hat(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_target_value_hat(flfs, biols, ctrl, target_no, sim_target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_target_value_hat2
std::vector<double> test_operatingModel_get_target_value_hat2(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int target_no);
RcppExport SEXP _FLasherTests_test_operatingModel_get_target_value_hat2(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_target_value_hat2(flfs, biols, ctrl, target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_target_value
std::vector<double> test_operatingModel_get_target_value(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int target_no, const int sim_target_no);
RcppExport SEXP _FLasherTests_test_operatingModel_get_target_value(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const int >::type sim_target_no(sim_target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_target_value(flfs, biols, ctrl, target_no, sim_target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_target_value2
std::vector<double> test_operatingModel_get_target_value2(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int target_no);
RcppExport SEXP _FLasherTests_test_operatingModel_get_target_value2(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP target_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type target_no(target_noSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_target_value2(flfs, biols, ctrl, target_no));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_get_target_hat_indices
Rcpp::List test_operatingModel_get_target_hat_indices(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const unsigned int target_no, const unsigned int sim_target_no, const unsigned int target_component, const bool relative);
RcppExport SEXP _FLasherTests_test_operatingModel_get_target_hat_indices(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP target_noSEXP, SEXP sim_target_noSEXP, SEXP target_componentSEXP, SEXP relativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type target_no(target_noSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type sim_target_no(sim_target_noSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type target_component(target_componentSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_get_target_hat_indices(flfs, biols, ctrl, target_no, sim_target_no, target_component, relative));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_catches_subset
FLQuantAD test_operatingModel_catches_subset(FLFisheriesAD flfs, fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_catches_subset(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_catches_subset(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_landings_subset
FLQuantAD test_operatingModel_landings_subset(FLFisheriesAD flfs, SEXP flbs_list_sexp, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_landings_subset(SEXP flfsSEXP, SEXP flbs_list_sexpSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type flbs_list_sexp(flbs_list_sexpSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_landings_subset(flfs, flbs_list_sexp, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_discards_subset
FLQuantAD test_operatingModel_discards_subset(FLFisheriesAD flfs, SEXP flbs_list_sexp, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_discards_subset(SEXP flfsSEXP, SEXP flbs_list_sexpSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type flbs_list_sexp(flbs_list_sexpSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_discards_subset(flfs, flbs_list_sexp, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_catch_n_subset
FLQuantAD test_operatingModel_catch_n_subset(FLFisheriesAD flfs, SEXP flbs_list_sexp, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_catch_n_subset(SEXP flfsSEXP, SEXP flbs_list_sexpSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type flbs_list_sexp(flbs_list_sexpSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_catch_n_subset(flfs, flbs_list_sexp, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_landings_n_subset
FLQuantAD test_operatingModel_landings_n_subset(FLFisheriesAD flfs, SEXP flbs_list_sexp, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_landings_n_subset(SEXP flfsSEXP, SEXP flbs_list_sexpSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type flbs_list_sexp(flbs_list_sexpSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_landings_n_subset(flfs, flbs_list_sexp, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_discards_n_subset
FLQuantAD test_operatingModel_discards_n_subset(FLFisheriesAD flfs, SEXP flbs_list_sexp, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_discards_n_subset(SEXP flfsSEXP, SEXP flbs_list_sexpSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type flbs_list_sexp(flbs_list_sexpSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_discards_n_subset(flfs, flbs_list_sexp, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_ssb_start
FLQuantAD test_operatingModel_ssb_start(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_ssb_start(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_ssb_start(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_biomass_start
FLQuantAD test_operatingModel_biomass_start(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_biomass_start(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_biomass_start(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_ssb_end
FLQuantAD test_operatingModel_ssb_end(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_ssb_end(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_ssb_end(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_ssb_spawn
FLQuantAD test_operatingModel_ssb_spawn(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_ssb_spawn(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_ssb_spawn(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_ssb_flash
FLQuantAD test_operatingModel_ssb_flash(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_ssb_flash(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_ssb_flash(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_biomass_flash
FLQuantAD test_operatingModel_biomass_flash(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_biomass_flash(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_biomass_flash(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_biomass_end
FLQuantAD test_operatingModel_biomass_end(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_biomass_end(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_biomass_end(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_biomass_spawn
FLQuantAD test_operatingModel_biomass_spawn(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_biomass_spawn(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_biomass_spawn(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_spawn_before_fishing
bool test_operatingModel_spawn_before_fishing(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_spawn_before_fishing(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_spawn_before_fishing(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_operatingModel_fishing_before_spawn
bool test_operatingModel_fishing_before_spawn(const FLFisheriesAD flfs, const fwdBiolsAD biols, const fwdControl ctrl, const int biol_no, const std::vector<unsigned int> indices_min, const std::vector<unsigned int> indices_max);
RcppExport SEXP _FLasherTests_test_operatingModel_fishing_before_spawn(SEXP flfsSEXP, SEXP biolsSEXP, SEXP ctrlSEXP, SEXP biol_noSEXP, SEXP indices_minSEXP, SEXP indices_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const FLFisheriesAD >::type flfs(flfsSEXP);
    Rcpp::traits::input_parameter< const fwdBiolsAD >::type biols(biolsSEXP);
    Rcpp::traits::input_parameter< const fwdControl >::type ctrl(ctrlSEXP);
    Rcpp::traits::input_parameter< const int >::type biol_no(biol_noSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_min(indices_minSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type indices_max(indices_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(test_operatingModel_fishing_before_spawn(flfs, biols, ctrl, biol_no, indices_min, indices_max));
    return rcpp_result_gen;
END_RCPP
}
// test_max3
std::vector<double> test_max3(std::vector<double> indep);
RcppExport SEXP _FLasherTests_test_max3(SEXP indepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type indep(indepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_max3(indep));
    return rcpp_result_gen;
END_RCPP
}
// test_max2
std::vector<double> test_max2(std::vector<double> indep);
RcppExport SEXP _FLasherTests_test_max2(SEXP indepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type indep(indepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_max2(indep));
    return rcpp_result_gen;
END_RCPP
}
// test_max
std::vector<double> test_max(std::vector<double> indep);
RcppExport SEXP _FLasherTests_test_max(SEXP indepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type indep(indepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_max(indep));
    return rcpp_result_gen;
END_RCPP
}
// test_standard_conditional
std::vector<double> test_standard_conditional(std::vector<double> indep);
RcppExport SEXP _FLasherTests_test_standard_conditional(SEXP indepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type indep(indepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_standard_conditional(indep));
    return rcpp_result_gen;
END_RCPP
}
// test_cppad_conditional
std::vector<double> test_cppad_conditional(std::vector<double> indep);
RcppExport SEXP _FLasherTests_test_cppad_conditional(SEXP indepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type indep(indepSEXP);
    rcpp_result_gen = Rcpp::wrap(test_cppad_conditional(indep));
    return rcpp_result_gen;
END_RCPP
}
// test_euclid_norm
double test_euclid_norm(std::vector<double> xvec);
RcppExport SEXP _FLasherTests_test_euclid_norm(SEXP xvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type xvec(xvecSEXP);
    rcpp_result_gen = Rcpp::wrap(test_euclid_norm(xvec));
    return rcpp_result_gen;
END_RCPP
}
// test_NR_quad_iters
Rcpp::List test_NR_quad_iters(const Rcpp::NumericMatrix coefs, const double initial_value, const unsigned int max_iters, const double indep_min, const double indep_max, const double tolerance);
RcppExport SEXP _FLasherTests_test_NR_quad_iters(SEXP coefsSEXP, SEXP initial_valueSEXP, SEXP max_itersSEXP, SEXP indep_minSEXP, SEXP indep_maxSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< const double >::type initial_value(initial_valueSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_min(indep_minSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_max(indep_maxSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(test_NR_quad_iters(coefs, initial_value, max_iters, indep_min, indep_max, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// test_NR_linear
Rcpp::List test_NR_linear(std::vector<double> initial_value, const Rcpp::NumericMatrix coefs, const unsigned int max_iters, const double indep_min, const double indep_max, const double tolerance);
RcppExport SEXP _FLasherTests_test_NR_linear(SEXP initial_valueSEXP, SEXP coefsSEXP, SEXP max_itersSEXP, SEXP indep_minSEXP, SEXP indep_maxSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type initial_value(initial_valueSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_min(indep_minSEXP);
    Rcpp::traits::input_parameter< const double >::type indep_max(indep_maxSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(test_NR_linear(initial_value, coefs, max_iters, indep_min, indep_max, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// eval_user_function
std::vector<double> eval_user_function(SEXP xpsexp, std::vector<double> params);
RcppExport SEXP _FLasherTests_eval_user_function(SEXP xpsexpSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpsexp(xpsexpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_user_function(xpsexp, params));
    return rcpp_result_gen;
END_RCPP
}
// eval_user_gradient
std::vector<double> eval_user_gradient(SEXP xpsexp, std::vector<double> params);
RcppExport SEXP _FLasherTests_eval_user_gradient(SEXP xpsexpSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xpsexp(xpsexpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type params(paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_user_gradient(xpsexp, params));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FLasherTests_test_FLQuant_FLQuant_multiplier_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_multiplier_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_multiplier_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_multiplier_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_multiplier_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_multiplier_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_double_multiplier_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_multiplier_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_multiplier_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_multiplier_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_multiplier_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_multiplier_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuantAD_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuantAD_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuant_double_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_multiplier_operator, 2},
    {"_FLasherTests_test_double_FLQuant_multiplier_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuant_multiplier_operator, 2},
    {"_FLasherTests_test_double_FLQuantAD_multiplier_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuantAD_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuant_adouble_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_adouble_multiplier_operator, 2},
    {"_FLasherTests_test_adouble_FLQuant_multiplier_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuant_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_multiplier_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_multiplier_operator, 2},
    {"_FLasherTests_test_adouble_FLQuantAD_multiplier_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuantAD_multiplier_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_division_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_division_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_division_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_division_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_division_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_division_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_double_division_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_division_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_division_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_division_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_division_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_division_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_division_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_division_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuantAD_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuantAD_division_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_division_operator, 2},
    {"_FLasherTests_test_FLQuant_double_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_division_operator, 2},
    {"_FLasherTests_test_double_FLQuant_division_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuant_division_operator, 2},
    {"_FLasherTests_test_double_FLQuantAD_division_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuantAD_division_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_division_operator, 2},
    {"_FLasherTests_test_FLQuant_adouble_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_adouble_division_operator, 2},
    {"_FLasherTests_test_adouble_FLQuant_division_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuant_division_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_division_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_division_operator, 2},
    {"_FLasherTests_test_adouble_FLQuantAD_division_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuantAD_division_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_subtraction_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_subtraction_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_subtraction_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_subtraction_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_subtraction_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_subtraction_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_double_subtraction_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_subtraction_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_subtraction_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_subtraction_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_subtraction_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_subtraction_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuantAD_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuantAD_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuant_double_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_subtraction_operator, 2},
    {"_FLasherTests_test_double_FLQuant_subtraction_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuant_subtraction_operator, 2},
    {"_FLasherTests_test_double_FLQuantAD_subtraction_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuantAD_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuant_adouble_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_adouble_subtraction_operator, 2},
    {"_FLasherTests_test_adouble_FLQuant_subtraction_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuant_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_subtraction_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_subtraction_operator, 2},
    {"_FLasherTests_test_adouble_FLQuantAD_subtraction_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuantAD_subtraction_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_addition_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_addition_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_addition_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_addition_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_addition_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_addition_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_double_addition_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_addition_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_addition_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_addition_assignment_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_addition_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_addition_assignment_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_addition_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_addition_operator, 2},
    {"_FLasherTests_test_FLQuant_FLQuantAD_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuantAD_addition_operator, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_addition_operator, 2},
    {"_FLasherTests_test_FLQuant_double_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_double_addition_operator, 2},
    {"_FLasherTests_test_double_FLQuant_addition_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuant_addition_operator, 2},
    {"_FLasherTests_test_double_FLQuantAD_addition_operator", (DL_FUNC) &_FLasherTests_test_double_FLQuantAD_addition_operator, 2},
    {"_FLasherTests_test_FLQuantAD_double_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_double_addition_operator, 2},
    {"_FLasherTests_test_FLQuant_adouble_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_adouble_addition_operator, 2},
    {"_FLasherTests_test_adouble_FLQuant_addition_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuant_addition_operator, 2},
    {"_FLasherTests_test_FLQuantAD_adouble_addition_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_adouble_addition_operator, 2},
    {"_FLasherTests_test_adouble_FLQuantAD_addition_operator", (DL_FUNC) &_FLasherTests_test_adouble_FLQuantAD_addition_operator, 2},
    {"_FLasherTests_test_FLQuant_log", (DL_FUNC) &_FLasherTests_test_FLQuant_log, 1},
    {"_FLasherTests_test_FLQuantAD_log", (DL_FUNC) &_FLasherTests_test_FLQuantAD_log, 1},
    {"_FLasherTests_test_FLQuant_exp", (DL_FUNC) &_FLasherTests_test_FLQuant_exp, 1},
    {"_FLasherTests_test_FLQuantAD_exp", (DL_FUNC) &_FLasherTests_test_FLQuantAD_exp, 1},
    {"_FLasherTests_test_composite_arithmetic_operators", (DL_FUNC) &_FLasherTests_test_composite_arithmetic_operators, 3},
    {"_FLasherTests_test_FLQuant_quant_sum", (DL_FUNC) &_FLasherTests_test_FLQuant_quant_sum, 1},
    {"_FLasherTests_test_FLQuantAD_quant_sum", (DL_FUNC) &_FLasherTests_test_FLQuantAD_quant_sum, 1},
    {"_FLasherTests_test_FLQuant_quant_mean", (DL_FUNC) &_FLasherTests_test_FLQuant_quant_mean, 1},
    {"_FLasherTests_test_FLQuant_year_sum", (DL_FUNC) &_FLasherTests_test_FLQuant_year_sum, 1},
    {"_FLasherTests_test_FLQuant_year_mean", (DL_FUNC) &_FLasherTests_test_FLQuant_year_mean, 1},
    {"_FLasherTests_test_FLQuantAD_quant_mean", (DL_FUNC) &_FLasherTests_test_FLQuantAD_quant_mean, 1},
    {"_FLasherTests_test_FLQuant_max_quant", (DL_FUNC) &_FLasherTests_test_FLQuant_max_quant, 1},
    {"_FLasherTests_test_FLQuantAD_max_quant", (DL_FUNC) &_FLasherTests_test_FLQuantAD_max_quant, 1},
    {"_FLasherTests_test_FLQuant_scale_by_max_quant", (DL_FUNC) &_FLasherTests_test_FLQuant_scale_by_max_quant, 1},
    {"_FLasherTests_test_FLQuantAD_scale_by_max_quant", (DL_FUNC) &_FLasherTests_test_FLQuantAD_scale_by_max_quant, 1},
    {"_FLasherTests_test_FLQuantAD_unit_sum", (DL_FUNC) &_FLasherTests_test_FLQuantAD_unit_sum, 1},
    {"_FLasherTests_test_sweep_multADAD", (DL_FUNC) &_FLasherTests_test_sweep_multADAD, 2},
    {"_FLasherTests_test_sweep_multDD", (DL_FUNC) &_FLasherTests_test_sweep_multDD, 2},
    {"_FLasherTests_test_sweep_multADD", (DL_FUNC) &_FLasherTests_test_sweep_multADD, 2},
    {"_FLasherTests_test_sweep_multDAD", (DL_FUNC) &_FLasherTests_test_sweep_multDAD, 2},
    {"_FLasherTests_test_sweep_divADAD", (DL_FUNC) &_FLasherTests_test_sweep_divADAD, 2},
    {"_FLasherTests_test_sweep_divDD", (DL_FUNC) &_FLasherTests_test_sweep_divDD, 2},
    {"_FLasherTests_test_sweep_divADD", (DL_FUNC) &_FLasherTests_test_sweep_divADD, 2},
    {"_FLasherTests_test_sweep_divDAD", (DL_FUNC) &_FLasherTests_test_sweep_divDAD, 2},
    {"_FLasherTests_test_sweep_plusADAD", (DL_FUNC) &_FLasherTests_test_sweep_plusADAD, 2},
    {"_FLasherTests_test_sweep_plusDD", (DL_FUNC) &_FLasherTests_test_sweep_plusDD, 2},
    {"_FLasherTests_test_sweep_plusADD", (DL_FUNC) &_FLasherTests_test_sweep_plusADD, 2},
    {"_FLasherTests_test_sweep_plusDAD", (DL_FUNC) &_FLasherTests_test_sweep_plusDAD, 2},
    {"_FLasherTests_test_sweep_minusADAD", (DL_FUNC) &_FLasherTests_test_sweep_minusADAD, 2},
    {"_FLasherTests_test_sweep_minusDD", (DL_FUNC) &_FLasherTests_test_sweep_minusDD, 2},
    {"_FLasherTests_test_sweep_minusADD", (DL_FUNC) &_FLasherTests_test_sweep_minusADD, 2},
    {"_FLasherTests_test_sweep_minusDAD", (DL_FUNC) &_FLasherTests_test_sweep_minusDAD, 2},
    {"_FLasherTests_test_int_is_na", (DL_FUNC) &_FLasherTests_test_int_is_na, 1},
    {"_FLasherTests_test_double_is_na", (DL_FUNC) &_FLasherTests_test_double_is_na, 1},
    {"_FLasherTests_test_simple_FLCatch_sexp_constructor", (DL_FUNC) &_FLasherTests_test_simple_FLCatch_sexp_constructor, 1},
    {"_FLasherTests_test_FLCatch_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLCatch_sexp_constructor, 1},
    {"_FLasherTests_test_FLCatchAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLCatchAD_sexp_constructor, 1},
    {"_FLasherTests_test_FLCatch_as_wrap", (DL_FUNC) &_FLasherTests_test_FLCatch_as_wrap, 1},
    {"_FLasherTests_test_FLCatchAD_as_wrap", (DL_FUNC) &_FLasherTests_test_FLCatchAD_as_wrap, 1},
    {"_FLasherTests_test_FLCatch_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLCatch_copy_constructor, 1},
    {"_FLasherTests_test_FLCatchAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLCatchAD_copy_constructor, 1},
    {"_FLasherTests_test_FLCatch_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLCatch_copy_constructor2, 8},
    {"_FLasherTests_test_FLCatchAD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLCatchAD_copy_constructor2, 8},
    {"_FLasherTests_test_FLCatch_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLCatch_assignment_operator, 1},
    {"_FLasherTests_test_FLCatchAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLCatchAD_assignment_operator, 1},
    {"_FLasherTests_test_FLCatch_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLCatch_assignment_operator2, 8},
    {"_FLasherTests_test_FLCatchAD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLCatchAD_assignment_operator2, 8},
    {"_FLasherTests_test_FLCatch_const_get_accessors", (DL_FUNC) &_FLasherTests_test_FLCatch_const_get_accessors, 7},
    {"_FLasherTests_test_FLCatch_const_get_accessors_subset", (DL_FUNC) &_FLasherTests_test_FLCatch_const_get_accessors_subset, 3},
    {"_FLasherTests_test_FLCatchAD_const_get_accessors", (DL_FUNC) &_FLasherTests_test_FLCatchAD_const_get_accessors, 7},
    {"_FLasherTests_test_FLCatch_get_accessors", (DL_FUNC) &_FLasherTests_test_FLCatch_get_accessors, 7},
    {"_FLasherTests_test_FLCatchAD_get_accessors", (DL_FUNC) &_FLasherTests_test_FLCatchAD_get_accessors, 7},
    {"_FLasherTests_test_FLCatch_set_accessors", (DL_FUNC) &_FLasherTests_test_FLCatch_set_accessors, 8},
    {"_FLasherTests_test_FLCatchAD_set_accessors", (DL_FUNC) &_FLasherTests_test_FLCatchAD_set_accessors, 8},
    {"_FLasherTests_test_FLCatch_revenue_subset", (DL_FUNC) &_FLasherTests_test_FLCatch_revenue_subset, 3},
    {"_FLasherTests_test_FLCatch_revenue", (DL_FUNC) &_FLasherTests_test_FLCatch_revenue, 1},
    {"_FLasherTests_test_FLCatch_landings", (DL_FUNC) &_FLasherTests_test_FLCatch_landings, 1},
    {"_FLasherTests_test_FLCatchAD_landings", (DL_FUNC) &_FLasherTests_test_FLCatchAD_landings, 1},
    {"_FLasherTests_test_FLCatch_discards", (DL_FUNC) &_FLasherTests_test_FLCatch_discards, 1},
    {"_FLasherTests_test_FLCatchAD_discards", (DL_FUNC) &_FLasherTests_test_FLCatchAD_discards, 1},
    {"_FLasherTests_test_FLCatch_catch_n", (DL_FUNC) &_FLasherTests_test_FLCatch_catch_n, 1},
    {"_FLasherTests_test_FLCatchAD_catch_n", (DL_FUNC) &_FLasherTests_test_FLCatchAD_catch_n, 1},
    {"_FLasherTests_test_FLCatch_catch_wt", (DL_FUNC) &_FLasherTests_test_FLCatch_catch_wt, 1},
    {"_FLasherTests_test_FLCatchAD_catch_wt", (DL_FUNC) &_FLasherTests_test_FLCatchAD_catch_wt, 1},
    {"_FLasherTests_test_FLCatch_catches", (DL_FUNC) &_FLasherTests_test_FLCatch_catches, 1},
    {"_FLasherTests_test_FLCatchAD_catches", (DL_FUNC) &_FLasherTests_test_FLCatchAD_catches, 1},
    {"_FLasherTests_test_FLCatch_discards_ratio", (DL_FUNC) &_FLasherTests_test_FLCatch_discards_ratio, 1},
    {"_FLasherTests_test_FLCatchAD_discards_ratio", (DL_FUNC) &_FLasherTests_test_FLCatchAD_discards_ratio, 1},
    {"_FLasherTests_test_FLCatch_landings_sel", (DL_FUNC) &_FLasherTests_test_FLCatch_landings_sel, 1},
    {"_FLasherTests_test_FLCatchAD_landings_sel", (DL_FUNC) &_FLasherTests_test_FLCatchAD_landings_sel, 1},
    {"_FLasherTests_test_FLCatch_discards_sel", (DL_FUNC) &_FLasherTests_test_FLCatch_discards_sel, 1},
    {"_FLasherTests_test_FLCatchAD_discards_sel", (DL_FUNC) &_FLasherTests_test_FLCatchAD_discards_sel, 1},
    {"_FLasherTests_test_FLCatchAD_catch_q_params", (DL_FUNC) &_FLasherTests_test_FLCatchAD_catch_q_params, 2},
    {"_FLasherTests_test_FLCatchAD_catch_q_params_subset", (DL_FUNC) &_FLasherTests_test_FLCatchAD_catch_q_params_subset, 3},
    {"_FLasherTests_test_FLCatches_as_wrap", (DL_FUNC) &_FLasherTests_test_FLCatches_as_wrap, 1},
    {"_FLasherTests_test_FLCatches_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLCatches_sexp_constructor, 1},
    {"_FLasherTests_test_FLCatches_FLCatch_constructor", (DL_FUNC) &_FLasherTests_test_FLCatches_FLCatch_constructor, 1},
    {"_FLasherTests_test_FLCatches_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLCatches_copy_constructor, 1},
    {"_FLasherTests_test_FLCatches_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLCatches_copy_constructor2, 9},
    {"_FLasherTests_test_FLCatches_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLCatches_assignment_operator, 1},
    {"_FLasherTests_test_FLCatches_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLCatches_assignment_operator2, 9},
    {"_FLasherTests_test_FLCatches_function_operator", (DL_FUNC) &_FLasherTests_test_FLCatches_function_operator, 2},
    {"_FLasherTests_test_FLCatches_get_ncatches", (DL_FUNC) &_FLasherTests_test_FLCatches_get_ncatches, 1},
    {"_FLasherTests_test_FLCatches_const_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLCatches_const_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLCatches_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLCatches_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLCatches_const_get_value_accessor", (DL_FUNC) &_FLasherTests_test_FLCatches_const_get_value_accessor, 8},
    {"_FLasherTests_test_FLCatches_get_value_accessor", (DL_FUNC) &_FLasherTests_test_FLCatches_get_value_accessor, 8},
    {"_FLasherTests_test_FLCatches_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLCatches_set_single_index_accessor, 3},
    {"_FLasherTests_test_FLCatches_set_value_accessor", (DL_FUNC) &_FLasherTests_test_FLCatches_set_value_accessor, 9},
    {"_FLasherTests_test_FLCatchesAD_as_wrap", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_as_wrap, 1},
    {"_FLasherTests_test_FLCatchesAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_sexp_constructor, 1},
    {"_FLasherTests_test_FLCatchesAD_FLCatchAD_constructor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_FLCatchAD_constructor, 1},
    {"_FLasherTests_test_FLCatchesAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_copy_constructor, 1},
    {"_FLasherTests_test_FLCatchesAD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_copy_constructor2, 9},
    {"_FLasherTests_test_FLCatchesAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_assignment_operator, 1},
    {"_FLasherTests_test_FLCatchesAD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_assignment_operator2, 9},
    {"_FLasherTests_test_FLCatchesAD_function_operator", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_function_operator, 2},
    {"_FLasherTests_test_FLCatchesAD_get_ncatches", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_get_ncatches, 1},
    {"_FLasherTests_test_FLCatchesAD_const_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_const_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLCatchesAD_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLCatchesAD_const_get_value_accessor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_const_get_value_accessor, 8},
    {"_FLasherTests_test_FLCatchesAD_get_value_accessor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_get_value_accessor, 8},
    {"_FLasherTests_test_FLCatchesAD_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_set_single_index_accessor, 3},
    {"_FLasherTests_test_FLCatchesAD_set_value_accessor", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_set_value_accessor, 9},
    {"_FLasherTests_test_FLCatchesAD_const_iterator", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_const_iterator, 1},
    {"_FLasherTests_test_FLCatchesAD_iterator", (DL_FUNC) &_FLasherTests_test_FLCatchesAD_iterator, 8},
    {"_FLasherTests_test_FLFishery_empty_constructor", (DL_FUNC) &_FLasherTests_test_FLFishery_empty_constructor, 0},
    {"_FLasherTests_test_simple_FLFishery_sexp_constructor", (DL_FUNC) &_FLasherTests_test_simple_FLFishery_sexp_constructor, 1},
    {"_FLasherTests_test_FLFishery_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLFishery_sexp_constructor, 1},
    {"_FLasherTests_test_FLFishery_as_wrap", (DL_FUNC) &_FLasherTests_test_FLFishery_as_wrap, 1},
    {"_FLasherTests_test_FLFishery_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLFishery_copy_constructor, 1},
    {"_FLasherTests_test_FLFishery_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLFishery_assignment_operator, 1},
    {"_FLasherTests_test_FLFishery_const_catches_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFishery_const_catches_get_accessors, 8},
    {"_FLasherTests_test_FLFishery_catches_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFishery_catches_get_accessors, 8},
    {"_FLasherTests_test_FLFishery_const_economics_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFishery_const_economics_get_accessors, 6},
    {"_FLasherTests_test_FLFishery_const_get_hperiod", (DL_FUNC) &_FLasherTests_test_FLFishery_const_get_hperiod, 7},
    {"_FLasherTests_test_FLFishery_get_hperiod", (DL_FUNC) &_FLasherTests_test_FLFishery_get_hperiod, 7},
    {"_FLasherTests_test_FLFishery_set_hperiod", (DL_FUNC) &_FLasherTests_test_FLFishery_set_hperiod, 8},
    {"_FLasherTests_test_FLFishery_get_effort_subset", (DL_FUNC) &_FLasherTests_test_FLFishery_get_effort_subset, 3},
    {"_FLasherTests_test_FLFishery_get_effort", (DL_FUNC) &_FLasherTests_test_FLFishery_get_effort, 1},
    {"_FLasherTests_test_FLFishery_economics_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFishery_economics_get_accessors, 6},
    {"_FLasherTests_test_FLFishery_set_accessors", (DL_FUNC) &_FLasherTests_test_FLFishery_set_accessors, 9},
    {"_FLasherTests_test_FLFishery_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLFishery_copy_constructor2, 9},
    {"_FLasherTests_test_FLFishery_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLFishery_assignment_operator2, 9},
    {"_FLasherTests_test_FLFisheryAD_empty_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_empty_constructor, 0},
    {"_FLasherTests_test_simple_FLFisheryAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_simple_FLFisheryAD_sexp_constructor, 1},
    {"_FLasherTests_test_FLFisheryAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_sexp_constructor, 1},
    {"_FLasherTests_test_FLFisheryAD_as_wrap", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_as_wrap, 1},
    {"_FLasherTests_test_FLFisheryAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_copy_constructor, 1},
    {"_FLasherTests_test_FLFisheryAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_assignment_operator, 1},
    {"_FLasherTests_test_FLFisheryAD_const_catches_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_const_catches_get_accessors, 8},
    {"_FLasherTests_test_FLFisheryAD_catches_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_catches_get_accessors, 8},
    {"_FLasherTests_test_FLFisheryAD_const_economics_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_const_economics_get_accessors, 6},
    {"_FLasherTests_test_FLFisheryAD_economics_get_accessors", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_economics_get_accessors, 6},
    {"_FLasherTests_test_FLFisheryAD_set_accessors", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_set_accessors, 9},
    {"_FLasherTests_test_FLFisheryAD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_copy_constructor2, 9},
    {"_FLasherTests_test_FLFisheryAD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_assignment_operator2, 9},
    {"_FLasherTests_test_FLFisheryAD_const_iterator", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_const_iterator, 1},
    {"_FLasherTests_test_FLFisheryAD_iterator", (DL_FUNC) &_FLasherTests_test_FLFisheryAD_iterator, 8},
    {"_FLasherTests_test_FLFisheries_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheries_sexp_constructor, 1},
    {"_FLasherTests_test_FLFisheries_as_wrap", (DL_FUNC) &_FLasherTests_test_FLFisheries_as_wrap, 1},
    {"_FLasherTests_test_FLFisheries_get_nfisheries", (DL_FUNC) &_FLasherTests_test_FLFisheries_get_nfisheries, 1},
    {"_FLasherTests_test_FLFisheries_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheries_copy_constructor, 1},
    {"_FLasherTests_test_FLFisheries_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLFisheries_copy_constructor2, 5},
    {"_FLasherTests_test_FLFisheries_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLFisheries_assignment_operator, 1},
    {"_FLasherTests_test_FLFisheries_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLFisheries_assignment_operator2, 5},
    {"_FLasherTests_test_FLFisheries_const_get_single", (DL_FUNC) &_FLasherTests_test_FLFisheries_const_get_single, 4},
    {"_FLasherTests_test_FLFisheries_get_single", (DL_FUNC) &_FLasherTests_test_FLFisheries_get_single, 4},
    {"_FLasherTests_test_FLFisheries_const_get_double", (DL_FUNC) &_FLasherTests_test_FLFisheries_const_get_double, 4},
    {"_FLasherTests_test_FLFisheries_get_double", (DL_FUNC) &_FLasherTests_test_FLFisheries_get_double, 4},
    {"_FLasherTests_test_FLFisheries_set_single", (DL_FUNC) &_FLasherTests_test_FLFisheries_set_single, 5},
    {"_FLasherTests_test_FLFisheries_set_double", (DL_FUNC) &_FLasherTests_test_FLFisheries_set_double, 5},
    {"_FLasherTests_test_FLFishery_revenue", (DL_FUNC) &_FLasherTests_test_FLFishery_revenue, 1},
    {"_FLasherTests_test_FLFishery_revenue_subset", (DL_FUNC) &_FLasherTests_test_FLFishery_revenue_subset, 3},
    {"_FLasherTests_test_FLFisheriesAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_sexp_constructor, 1},
    {"_FLasherTests_test_FLFisheriesAD_as_wrap", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_as_wrap, 1},
    {"_FLasherTests_test_FLFisheriesAD_get_nfisheries", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_get_nfisheries, 1},
    {"_FLasherTests_test_FLFisheriesAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_copy_constructor, 1},
    {"_FLasherTests_test_FLFisheriesAD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_copy_constructor2, 5},
    {"_FLasherTests_test_FLFisheriesAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_assignment_operator, 1},
    {"_FLasherTests_test_FLFisheriesAD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_assignment_operator2, 5},
    {"_FLasherTests_test_FLFisheriesAD_const_get_single", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_const_get_single, 4},
    {"_FLasherTests_test_FLFisheriesAD_get_single", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_get_single, 4},
    {"_FLasherTests_test_FLFisheriesAD_const_get_double", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_const_get_double, 4},
    {"_FLasherTests_test_FLFisheriesAD_get_double", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_get_double, 4},
    {"_FLasherTests_test_FLFisheriesAD_set_single", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_set_single, 5},
    {"_FLasherTests_test_FLFisheriesAD_set_double", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_set_double, 5},
    {"_FLasherTests_test_FLFisheriesAD_const_iterator", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_const_iterator, 1},
    {"_FLasherTests_test_FLFisheriesAD_iterator", (DL_FUNC) &_FLasherTests_test_FLFisheriesAD_iterator, 2},
    {"_FLasherTests_test_FLQuantAD_as_wrap", (DL_FUNC) &_FLasherTests_test_FLQuantAD_as_wrap, 1},
    {"_FLasherTests_test_FLQuantAD_basic_constructor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_basic_constructor, 0},
    {"_FLasherTests_test_FLQuantAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_sexp_constructor, 1},
    {"_FLasherTests_test_FLQuantAD_dim_constructor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_dim_constructor, 6},
    {"_FLasherTests_test_FLQuantAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_copy_constructor, 1},
    {"_FLasherTests_test_FLQuantAD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLQuantAD_copy_constructor2, 8},
    {"_FLasherTests_test_FLQuantAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuantAD_assignment_operator, 1},
    {"_FLasherTests_test_FLQuantAD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLQuantAD_assignment_operator2, 8},
    {"_FLasherTests_test_FLQuantAD_from_FLQuant_constructor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_from_FLQuant_constructor, 1},
    {"_FLasherTests_test_FLQuantAD_get_units", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_units, 1},
    {"_FLasherTests_test_FLQuantAD_get_dim", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_dim, 1},
    {"_FLasherTests_test_FLQuantAD_get_dimnames", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_dimnames, 1},
    {"_FLasherTests_test_FLQuantAD_get_size", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_size, 1},
    {"_FLasherTests_test_FLQuantAD_get_nquant", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_nquant, 1},
    {"_FLasherTests_test_FLQuantAD_get_nyear", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_nyear, 1},
    {"_FLasherTests_test_FLQuantAD_get_nunit", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_nunit, 1},
    {"_FLasherTests_test_FLQuantAD_get_nseason", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_nseason, 1},
    {"_FLasherTests_test_FLQuantAD_get_narea", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_narea, 1},
    {"_FLasherTests_test_FLQuantAD_get_niter", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_niter, 1},
    {"_FLasherTests_test_FLQuantAD_get_data_element", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_data_element, 7},
    {"_FLasherTests_test_FLQuantAD_get_const_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_const_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuantAD_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuantAD_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_set_single_index_accessor, 3},
    {"_FLasherTests_test_FLQuantAD_const_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_const_get_accessor, 7},
    {"_FLasherTests_test_FLQuantAD_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_accessor, 7},
    {"_FLasherTests_test_FLQuantAD_set_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_set_accessor, 8},
    {"_FLasherTests_test_FLQuantAD_get_const_indices_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_const_indices_accessor, 2},
    {"_FLasherTests_test_FLQuantAD_get_indices_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_get_indices_accessor, 2},
    {"_FLasherTests_test_FLQuantAD_set_indices_accessor", (DL_FUNC) &_FLasherTests_test_FLQuantAD_set_indices_accessor, 3},
    {"_FLasherTests_test_FLQuantAD_set_dimnames", (DL_FUNC) &_FLasherTests_test_FLQuantAD_set_dimnames, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuantAD_match_dims", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuantAD_match_dims, 2},
    {"_FLasherTests_test_FLQuantAD_FLQuant_match_dims", (DL_FUNC) &_FLasherTests_test_FLQuantAD_FLQuant_match_dims, 2},
    {"_FLasherTests_test_FLQuant_FLQuantAD_match_dims", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuantAD_match_dims, 2},
    {"_FLasherTests_test_FLQuantAD_fill", (DL_FUNC) &_FLasherTests_test_FLQuantAD_fill, 2},
    {"_FLasherTests_test_FLQuantAD_fill_double", (DL_FUNC) &_FLasherTests_test_FLQuantAD_fill_double, 2},
    {"_FLasherTests_testFLCppAD", (DL_FUNC) &_FLasherTests_testFLCppAD, 1},
    {"_FLasherTests_FLPar_units", (DL_FUNC) &_FLasherTests_FLPar_units, 1},
    {"_FLasherTests_test_FLQuant_as_wrap", (DL_FUNC) &_FLasherTests_test_FLQuant_as_wrap, 1},
    {"_FLasherTests_test_FLQuant_basic_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_basic_constructor, 0},
    {"_FLasherTests_test_FLQuant_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_sexp_constructor, 1},
    {"_FLasherTests_test_FLQuant_dim_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_dim_constructor, 6},
    {"_FLasherTests_test_FLQuant_dim_value_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_dim_value_constructor, 7},
    {"_FLasherTests_test_FLQuant_intvec_dim_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_intvec_dim_constructor, 1},
    {"_FLasherTests_test_FLQuant_intvec_dim_value_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_intvec_dim_value_constructor, 2},
    {"_FLasherTests_test_FLQuant_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_copy_constructor, 1},
    {"_FLasherTests_test_FLQuant_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLQuant_copy_constructor2, 8},
    {"_FLasherTests_test_FLQuant_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant_assignment_operator, 1},
    {"_FLasherTests_test_FLQuant_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLQuant_assignment_operator2, 8},
    {"_FLasherTests_test_FLQuant_from_FLQuantAD_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant_from_FLQuantAD_constructor, 1},
    {"_FLasherTests_test_FLQuant_get_data", (DL_FUNC) &_FLasherTests_test_FLQuant_get_data, 1},
    {"_FLasherTests_test_FLQuant_get_units", (DL_FUNC) &_FLasherTests_test_FLQuant_get_units, 1},
    {"_FLasherTests_test_FLQuant_get_dim", (DL_FUNC) &_FLasherTests_test_FLQuant_get_dim, 1},
    {"_FLasherTests_test_FLQuant_get_dimnames", (DL_FUNC) &_FLasherTests_test_FLQuant_get_dimnames, 1},
    {"_FLasherTests_test_FLQuant_get_dimnames2", (DL_FUNC) &_FLasherTests_test_FLQuant_get_dimnames2, 1},
    {"_FLasherTests_test_FLQuant_get_size", (DL_FUNC) &_FLasherTests_test_FLQuant_get_size, 1},
    {"_FLasherTests_test_FLQuant_get_nquant", (DL_FUNC) &_FLasherTests_test_FLQuant_get_nquant, 1},
    {"_FLasherTests_test_FLQuant_get_nyear", (DL_FUNC) &_FLasherTests_test_FLQuant_get_nyear, 1},
    {"_FLasherTests_test_FLQuant_get_nunit", (DL_FUNC) &_FLasherTests_test_FLQuant_get_nunit, 1},
    {"_FLasherTests_test_FLQuant_get_nseason", (DL_FUNC) &_FLasherTests_test_FLQuant_get_nseason, 1},
    {"_FLasherTests_test_FLQuant_get_narea", (DL_FUNC) &_FLasherTests_test_FLQuant_get_narea, 1},
    {"_FLasherTests_test_FLQuant_get_niter", (DL_FUNC) &_FLasherTests_test_FLQuant_get_niter, 1},
    {"_FLasherTests_test_FLQuant_get_first_age", (DL_FUNC) &_FLasherTests_test_FLQuant_get_first_age, 1},
    {"_FLasherTests_test_FLQuant_get_data_element", (DL_FUNC) &_FLasherTests_test_FLQuant_get_data_element, 7},
    {"_FLasherTests_test_FLQuant_get_const_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_get_const_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuant_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuant_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_set_single_index_accessor, 3},
    {"_FLasherTests_test_FLQuant_const_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_const_get_accessor, 7},
    {"_FLasherTests_test_FLQuant_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_get_accessor, 7},
    {"_FLasherTests_test_FLQuant_set_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_set_accessor, 8},
    {"_FLasherTests_test_FLQuant_get_const_indices_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_get_const_indices_accessor, 2},
    {"_FLasherTests_test_FLQuant_get_indices_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_get_indices_accessor, 2},
    {"_FLasherTests_test_FLQuant_set_indices_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant_set_indices_accessor, 3},
    {"_FLasherTests_test_FLQuant_get_all_iters", (DL_FUNC) &_FLasherTests_test_FLQuant_get_all_iters, 6},
    {"_FLasherTests_test_FLQuant_set_data", (DL_FUNC) &_FLasherTests_test_FLQuant_set_data, 2},
    {"_FLasherTests_test_FLQuant_set_dimnames", (DL_FUNC) &_FLasherTests_test_FLQuant_set_dimnames, 2},
    {"_FLasherTests_test_FLQuant_set_units", (DL_FUNC) &_FLasherTests_test_FLQuant_set_units, 2},
    {"_FLasherTests_test_FLQuant_subset", (DL_FUNC) &_FLasherTests_test_FLQuant_subset, 13},
    {"_FLasherTests_test_FLQuant_neat_subset", (DL_FUNC) &_FLasherTests_test_FLQuant_neat_subset, 3},
    {"_FLasherTests_test_FLQuant_propagate_iters", (DL_FUNC) &_FLasherTests_test_FLQuant_propagate_iters, 2},
    {"_FLasherTests_test_FLQuant_fill", (DL_FUNC) &_FLasherTests_test_FLQuant_fill, 2},
    {"_FLasherTests_test_FLQuant_FLQuant_match_dims", (DL_FUNC) &_FLasherTests_test_FLQuant_FLQuant_match_dims, 2},
    {"_FLasherTests_test_FLPar_to_FLQuant", (DL_FUNC) &_FLasherTests_test_FLPar_to_FLQuant, 1},
    {"_FLasherTests_test_for_range", (DL_FUNC) &_FLasherTests_test_for_range, 2},
    {"_FLasherTests_test_for_range_const", (DL_FUNC) &_FLasherTests_test_for_range_const, 2},
    {"_FLasherTests_test_FLQuant_for_iterator", (DL_FUNC) &_FLasherTests_test_FLQuant_for_iterator, 2},
    {"_FLasherTests_test_FLQuant_for_iterator_const", (DL_FUNC) &_FLasherTests_test_FLQuant_for_iterator_const, 2},
    {"_FLasherTests_test_FLQuant_lambda", (DL_FUNC) &_FLasherTests_test_FLQuant_lambda, 2},
    {"_FLasherTests_test_DD_pow", (DL_FUNC) &_FLasherTests_test_DD_pow, 2},
    {"_FLasherTests_test_DAD_pow", (DL_FUNC) &_FLasherTests_test_DAD_pow, 2},
    {"_FLasherTests_test_ADD_pow", (DL_FUNC) &_FLasherTests_test_ADD_pow, 2},
    {"_FLasherTests_test_ADAD_pow", (DL_FUNC) &_FLasherTests_test_ADAD_pow, 2},
    {"_FLasherTests_test_input_subsetter_ADAD", (DL_FUNC) &_FLasherTests_test_input_subsetter_ADAD, 4},
    {"_FLasherTests_test_input_subsetter_DD", (DL_FUNC) &_FLasherTests_test_input_subsetter_DD, 4},
    {"_FLasherTests_test_input_subsetter_ADD", (DL_FUNC) &_FLasherTests_test_input_subsetter_ADD, 4},
    {"_FLasherTests_test_input_subsetter_DAD", (DL_FUNC) &_FLasherTests_test_input_subsetter_DAD, 4},
    {"_FLasherTests_test_year_season_to_timestep_FLQuant_double", (DL_FUNC) &_FLasherTests_test_year_season_to_timestep_FLQuant_double, 3},
    {"_FLasherTests_test_year_season_to_timestep_FLQuant_adouble", (DL_FUNC) &_FLasherTests_test_year_season_to_timestep_FLQuant_adouble, 3},
    {"_FLasherTests_test_year_season_to_timestep", (DL_FUNC) &_FLasherTests_test_year_season_to_timestep, 3},
    {"_FLasherTests_test_timestep_to_year_season_FLQuant_double", (DL_FUNC) &_FLasherTests_test_timestep_to_year_season_FLQuant_double, 2},
    {"_FLasherTests_test_timestep_to_year_season_FLQuant_adouble", (DL_FUNC) &_FLasherTests_test_timestep_to_year_season_FLQuant_adouble, 2},
    {"_FLasherTests_test_timestep_to_year_season", (DL_FUNC) &_FLasherTests_test_timestep_to_year_season, 2},
    {"_FLasherTests_test_FLQuant7_as_wrap", (DL_FUNC) &_FLasherTests_test_FLQuant7_as_wrap, 1},
    {"_FLasherTests_test_FLQuant7_empty_wrap", (DL_FUNC) &_FLasherTests_test_FLQuant7_empty_wrap, 0},
    {"_FLasherTests_test_FLQuant7_basic_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7_basic_constructor, 0},
    {"_FLasherTests_test_FLQuant7_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7_sexp_constructor, 1},
    {"_FLasherTests_test_FLQuant7_FLQuant_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7_FLQuant_constructor, 1},
    {"_FLasherTests_test_FLQuant7_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7_copy_constructor, 1},
    {"_FLasherTests_test_FLQuant7_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLQuant7_copy_constructor2, 9},
    {"_FLasherTests_test_FLQuant7_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant7_assignment_operator, 1},
    {"_FLasherTests_test_FLQuant7_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLQuant7_assignment_operator2, 9},
    {"_FLasherTests_test_FLQuant7_function_operator", (DL_FUNC) &_FLasherTests_test_FLQuant7_function_operator, 2},
    {"_FLasherTests_test_FLQuant7_get_ndim7", (DL_FUNC) &_FLasherTests_test_FLQuant7_get_ndim7, 1},
    {"_FLasherTests_test_FLQuant7_const_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_const_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuant7_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuant7_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_set_single_index_accessor, 3},
    {"_FLasherTests_test_FLQuant7_const_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_const_get_accessor, 8},
    {"_FLasherTests_test_FLQuant7_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_get_accessor, 8},
    {"_FLasherTests_test_FLQuant7_set_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_set_accessor, 9},
    {"_FLasherTests_test_FLQuant7_const_default_dim7_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_const_default_dim7_get_accessor, 1},
    {"_FLasherTests_test_FLQuant7_default_dim7_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_default_dim7_get_accessor, 1},
    {"_FLasherTests_test_FLQuant7_default_dim7_set_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7_default_dim7_set_accessor, 2},
    {"_FLasherTests_test_FLQuant7_const_default_dim7_get_accessor_multi", (DL_FUNC) &_FLasherTests_test_FLQuant7_const_default_dim7_get_accessor_multi, 7},
    {"_FLasherTests_test_FLQuant7_default_dim7_get_accessor_multi", (DL_FUNC) &_FLasherTests_test_FLQuant7_default_dim7_get_accessor_multi, 7},
    {"_FLasherTests_test_FLQuant7_default_dim7_set_accessor_multi", (DL_FUNC) &_FLasherTests_test_FLQuant7_default_dim7_set_accessor_multi, 8},
    {"_FLasherTests_test_FLQuant7AD_as_wrap", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_as_wrap, 1},
    {"_FLasherTests_test_FLQuant7AD_empty_wrap", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_empty_wrap, 0},
    {"_FLasherTests_test_FLQuant7AD_basic_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_basic_constructor, 0},
    {"_FLasherTests_test_FLQuant7AD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_sexp_constructor, 1},
    {"_FLasherTests_test_FLQuant7AD_FLQuant_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_FLQuant_constructor, 1},
    {"_FLasherTests_test_FLQuant7AD_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_copy_constructor, 1},
    {"_FLasherTests_test_FLQuant7AD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_copy_constructor2, 9},
    {"_FLasherTests_test_FLQuant7AD_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_assignment_operator, 1},
    {"_FLasherTests_test_FLQuant7AD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_assignment_operator2, 9},
    {"_FLasherTests_test_FLQuant7AD_function_operator", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_function_operator, 2},
    {"_FLasherTests_test_FLQuant7AD_get_ndim7", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_get_ndim7, 1},
    {"_FLasherTests_test_FLQuant7AD_const_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_const_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuant7AD_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_get_single_index_accessor, 2},
    {"_FLasherTests_test_FLQuant7AD_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_set_single_index_accessor, 3},
    {"_FLasherTests_test_FLQuant7AD_const_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_const_get_accessor, 8},
    {"_FLasherTests_test_FLQuant7AD_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_get_accessor, 8},
    {"_FLasherTests_test_FLQuant7AD_set_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_set_accessor, 9},
    {"_FLasherTests_test_FLQuant7AD_const_default_dim7_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_const_default_dim7_get_accessor, 1},
    {"_FLasherTests_test_FLQuant7AD_default_dim7_get_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_default_dim7_get_accessor, 1},
    {"_FLasherTests_test_FLQuant7AD_default_dim7_set_accessor", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_default_dim7_set_accessor, 2},
    {"_FLasherTests_test_FLQuant7AD_const_default_dim7_get_accessor_multi", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_const_default_dim7_get_accessor_multi, 7},
    {"_FLasherTests_test_FLQuant7AD_default_dim7_get_accessor_multi", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_default_dim7_get_accessor_multi, 7},
    {"_FLasherTests_test_FLQuant7AD_default_dim7_set_accessor_multi", (DL_FUNC) &_FLasherTests_test_FLQuant7AD_default_dim7_set_accessor_multi, 8},
    {"_FLasherTests_test_FLQ_in_FLS", (DL_FUNC) &_FLasherTests_test_FLQ_in_FLS, 1},
    {"_FLasherTests_test_FLStock_sexp_constructor", (DL_FUNC) &_FLasherTests_test_FLStock_sexp_constructor, 1},
    {"_FLasherTests_test_FLStock_wrap", (DL_FUNC) &_FLasherTests_test_FLStock_wrap, 1},
    {"_FLasherTests_test_FLStock_as", (DL_FUNC) &_FLasherTests_test_FLStock_as, 1},
    {"_FLasherTests_test_FLStock_as_wrap", (DL_FUNC) &_FLasherTests_test_FLStock_as_wrap, 1},
    {"_FLasherTests_test_FLStock_copy_constructor", (DL_FUNC) &_FLasherTests_test_FLStock_copy_constructor, 8},
    {"_FLasherTests_test_FLStock_assignment_operator", (DL_FUNC) &_FLasherTests_test_FLStock_assignment_operator, 8},
    {"_FLasherTests_test_fwdBiol_sexp_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiol_sexp_constructor, 1},
    {"_FLasherTests_test_fwdBiolAD_sexp_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_sexp_constructor, 1},
    {"_FLasherTests_test_fwdBiol_as_wrap", (DL_FUNC) &_FLasherTests_test_fwdBiol_as_wrap, 1},
    {"_FLasherTests_test_fwdBiolAD_as_wrap", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_as_wrap, 1},
    {"_FLasherTests_test_fwdBiol_fwdSR_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiol_fwdSR_constructor, 5},
    {"_FLasherTests_test_fwdBiolAD_fwdSRAD_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_fwdSRAD_constructor, 5},
    {"_FLasherTests_test_fwdBiol_FLSR_bits_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiol_FLSR_bits_constructor, 5},
    {"_FLasherTests_test_fwdBiolAD_FLSR_residuals_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_FLSR_residuals_constructor, 3},
    {"_FLasherTests_test_fwdBiolAD_FLSR_bits_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_FLSR_bits_constructor, 5},
    {"_FLasherTests_test_fwdBiol_copy_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiol_copy_constructor, 1},
    {"_FLasherTests_test_fwdBiolAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_copy_constructor, 1},
    {"_FLasherTests_test_fwdBiol_copy_constructor2", (DL_FUNC) &_FLasherTests_test_fwdBiol_copy_constructor2, 8},
    {"_FLasherTests_test_fwdBiolAD_copy_constructor2", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_copy_constructor2, 8},
    {"_FLasherTests_test_fwdBiol_assignment_operator", (DL_FUNC) &_FLasherTests_test_fwdBiol_assignment_operator, 1},
    {"_FLasherTests_test_fwdBiolAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_assignment_operator, 1},
    {"_FLasherTests_test_fwdBiol_assignment_operator2", (DL_FUNC) &_FLasherTests_test_fwdBiol_assignment_operator2, 8},
    {"_FLasherTests_test_fwdBiolAD_assignment_operator2", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_assignment_operator2, 8},
    {"_FLasherTests_test_fwdBiol_const_get_accessors", (DL_FUNC) &_FLasherTests_test_fwdBiol_const_get_accessors, 7},
    {"_FLasherTests_test_fwdBiol_const_get_accessors_subset", (DL_FUNC) &_FLasherTests_test_fwdBiol_const_get_accessors_subset, 3},
    {"_FLasherTests_test_fwdBiol_get_accessors", (DL_FUNC) &_FLasherTests_test_fwdBiol_get_accessors, 7},
    {"_FLasherTests_test_fwdBiolAD_const_get_accessors", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_const_get_accessors, 7},
    {"_FLasherTests_test_fwdBiolAD_get_accessors", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_get_accessors, 7},
    {"_FLasherTests_test_fwdBiol_set_accessors", (DL_FUNC) &_FLasherTests_test_fwdBiol_set_accessors, 8},
    {"_FLasherTests_test_fwdBiolAD_set_accessors", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_set_accessors, 8},
    {"_FLasherTests_fwdBiolAD_biomass_FLQ", (DL_FUNC) &_FLasherTests_fwdBiolAD_biomass_FLQ, 1},
    {"_FLasherTests_fwdBiolAD_biomass_subset", (DL_FUNC) &_FLasherTests_fwdBiolAD_biomass_subset, 3},
    {"_FLasherTests_test_fwdBiolAD_n_direct_set_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_n_direct_set_accessor, 8},
    {"_FLasherTests_test_fwdBiolAD_n_direct_get_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolAD_n_direct_get_accessor, 7},
    {"_FLasherTests_test_fwdBiol_srp_timelag", (DL_FUNC) &_FLasherTests_test_fwdBiol_srp_timelag, 1},
    {"_FLasherTests_test_fwdBiols_as_wrap", (DL_FUNC) &_FLasherTests_test_fwdBiols_as_wrap, 1},
    {"_FLasherTests_test_fwdBiolsAD_as_wrap", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_as_wrap, 1},
    {"_FLasherTests_test_fwdBiolsAD_fwdBiolAD_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_fwdBiolAD_constructor, 3},
    {"_FLasherTests_test_fwdBiolsAD_const_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_const_get_single_index_accessor, 2},
    {"_FLasherTests_test_fwdBiolsAD_get_single_index_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_get_single_index_accessor, 2},
    {"_FLasherTests_test_fwdBiolsAD_const_get_value_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_const_get_value_accessor, 8},
    {"_FLasherTests_test_fwdBiolsAD_get_value_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_get_value_accessor, 8},
    {"_FLasherTests_test_fwdBiolsAD_set_single_index_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_set_single_index_accessor, 5},
    {"_FLasherTests_test_fwdBiolsAD_set_value_accessor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_set_value_accessor, 9},
    {"_FLasherTests_test_fwdBiolsAD_copy_constructor", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_copy_constructor, 4},
    {"_FLasherTests_test_fwdBiolsAD_assignment_operator", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_assignment_operator, 4},
    {"_FLasherTests_test_fwdBiolsAD_const_iterator", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_const_iterator, 1},
    {"_FLasherTests_test_fwdBiolsAD_iterator", (DL_FUNC) &_FLasherTests_test_fwdBiolsAD_iterator, 8},
    {"_FLasherTests_test_as_wrap_fwdControl", (DL_FUNC) &_FLasherTests_test_as_wrap_fwdControl, 1},
    {"_FLasherTests_test_fwdControl_copy_constructor", (DL_FUNC) &_FLasherTests_test_fwdControl_copy_constructor, 1},
    {"_FLasherTests_test_fwdControl_assignment_operator", (DL_FUNC) &_FLasherTests_test_fwdControl_assignment_operator, 1},
    {"_FLasherTests_test_fwdControl_get_target", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target, 1},
    {"_FLasherTests_test_fwdControl_get_ntarget", (DL_FUNC) &_FLasherTests_test_fwdControl_get_ntarget, 1},
    {"_FLasherTests_test_fwdControl_get_niter", (DL_FUNC) &_FLasherTests_test_fwdControl_get_niter, 1},
    {"_FLasherTests_test_fwdControl_get_nsim_target", (DL_FUNC) &_FLasherTests_test_fwdControl_get_nsim_target, 2},
    {"_FLasherTests_test_fwdControl_get_target_row", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_row, 3},
    {"_FLasherTests_test_fwdControl_get_target_rows", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_rows, 2},
    {"_FLasherTests_test_fwdControl_get_target_int_col", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_int_col, 3},
    {"_FLasherTests_test_fwdControl_get_target_int_col2", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_int_col2, 4},
    {"_FLasherTests_test_fwdControl_get_target_list_int_col", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_list_int_col, 3},
    {"_FLasherTests_test_fwdControl_get_target_list_int_col2", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_list_int_col2, 4},
    {"_FLasherTests_test_fwdControl_get_target_num_col", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_num_col, 3},
    {"_FLasherTests_test_fwdControl_get_target_num_col2", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_num_col2, 4},
    {"_FLasherTests_test_fwdControl_get_target_value", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_value, 3},
    {"_FLasherTests_test_fwdControl_get_target_value2", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_value2, 4},
    {"_FLasherTests_test_fwdControl_get_target_quantity", (DL_FUNC) &_FLasherTests_test_fwdControl_get_target_quantity, 3},
    {"_FLasherTests_test_fwdControl_get_age_range", (DL_FUNC) &_FLasherTests_test_fwdControl_get_age_range, 3},
    {"_FLasherTests_test_fwdControl_get_FC", (DL_FUNC) &_FLasherTests_test_fwdControl_get_FC, 2},
    {"_FLasherTests_test_fwdControl_get_B", (DL_FUNC) &_FLasherTests_test_fwdControl_get_B, 3},
    {"_FLasherTests_test_fwdControl_get_F", (DL_FUNC) &_FLasherTests_test_fwdControl_get_F, 2},
    {"_FLasherTests_test_fwdControl_get_FCB_nrow", (DL_FUNC) &_FLasherTests_test_fwdControl_get_FCB_nrow, 1},
    {"_FLasherTests_test_fwdControl_get_FCB_row_no", (DL_FUNC) &_FLasherTests_test_fwdControl_get_FCB_row_no, 4},
    {"_FLasherTests_test_fwdControl_get_FCB_nos", (DL_FUNC) &_FLasherTests_test_fwdControl_get_FCB_nos, 5},
    {"_FLasherTests_test_fwdControl_shared_catch", (DL_FUNC) &_FLasherTests_test_fwdControl_shared_catch, 2},
    {"_FLasherTests_test_fwdSR_empty_constructor", (DL_FUNC) &_FLasherTests_test_fwdSR_empty_constructor, 0},
    {"_FLasherTests_test_fwdSR_constructor_wrap", (DL_FUNC) &_FLasherTests_test_fwdSR_constructor_wrap, 4},
    {"_FLasherTests_test_fwdSR_get_nparams", (DL_FUNC) &_FLasherTests_test_fwdSR_get_nparams, 4},
    {"_FLasherTests_test_fwdSR_eval", (DL_FUNC) &_FLasherTests_test_fwdSR_eval, 6},
    {"_FLasherTests_test_fwdSR_get_params", (DL_FUNC) &_FLasherTests_test_fwdSR_get_params, 5},
    {"_FLasherTests_test_fwdSR_copy_constructor", (DL_FUNC) &_FLasherTests_test_fwdSR_copy_constructor, 5},
    {"_FLasherTests_test_fwdSR_assignment_operator", (DL_FUNC) &_FLasherTests_test_fwdSR_assignment_operator, 5},
    {"_FLasherTests_test_fwdSR_predict_recruitment", (DL_FUNC) &_FLasherTests_test_fwdSR_predict_recruitment, 6},
    {"_FLasherTests_test_fwdSR_does_recruitment_happen", (DL_FUNC) &_FLasherTests_test_fwdSR_does_recruitment_happen, 7},
    {"_FLasherTests_test_operatingModel_empty_constructor", (DL_FUNC) &_FLasherTests_test_operatingModel_empty_constructor, 0},
    {"_FLasherTests_test_operatingModel_full_constructor", (DL_FUNC) &_FLasherTests_test_operatingModel_full_constructor, 3},
    {"_FLasherTests_test_operatingModel_get_niter", (DL_FUNC) &_FLasherTests_test_operatingModel_get_niter, 3},
    {"_FLasherTests_test_operatingModel_get_exp_z_pre_spwn", (DL_FUNC) &_FLasherTests_test_operatingModel_get_exp_z_pre_spwn, 6},
    {"_FLasherTests_test_operatingModel_f_prop_spwn_FLQ_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_f_prop_spwn_FLQ_subset, 7},
    {"_FLasherTests_test_operatingModel_SRP_FLQ_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_SRP_FLQ_subset, 6},
    {"_FLasherTests_test_operatingModel_total_SRP_FLQ_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_total_SRP_FLQ_subset, 6},
    {"_FLasherTests_test_operatingModel_calc_rec", (DL_FUNC) &_FLasherTests_test_operatingModel_calc_rec, 6},
    {"_FLasherTests_test_operatingModel_get_f_FCB", (DL_FUNC) &_FLasherTests_test_operatingModel_get_f_FCB, 6},
    {"_FLasherTests_test_operatingModel_get_f_FCB_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_get_f_FCB_subset, 8},
    {"_FLasherTests_test_operatingModel_get_f_B_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_get_f_B_subset, 6},
    {"_FLasherTests_test_operatingModel_get_f_B", (DL_FUNC) &_FLasherTests_test_operatingModel_get_f_B, 4},
    {"_FLasherTests_test_operatingModel_fbar_FCB", (DL_FUNC) &_FLasherTests_test_operatingModel_fbar_FCB, 8},
    {"_FLasherTests_test_operatingModel_fbar_B", (DL_FUNC) &_FLasherTests_test_operatingModel_fbar_B, 6},
    {"_FLasherTests_test_operatingModel_nunit_z_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_nunit_z_subset, 6},
    {"_FLasherTests_test_operatingModel_nunit_f_B_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_nunit_f_B_subset, 6},
    {"_FLasherTests_test_operatingModel_nunit_f_FCB_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_nunit_f_FCB_subset, 8},
    {"_FLasherTests_test_operatingModel_survivors", (DL_FUNC) &_FLasherTests_test_operatingModel_survivors, 6},
    {"_FLasherTests_test_operatingModel_project_biols", (DL_FUNC) &_FLasherTests_test_operatingModel_project_biols, 4},
    {"_FLasherTests_test_operatingModel_project_fisheries", (DL_FUNC) &_FLasherTests_test_operatingModel_project_fisheries, 4},
    {"_FLasherTests_test_operatingModel_run", (DL_FUNC) &_FLasherTests_test_operatingModel_run, 7},
    {"_FLasherTests_test_operatingModel_run2", (DL_FUNC) &_FLasherTests_test_operatingModel_run2, 7},
    {"_FLasherTests_test_operatingModel_eval_om", (DL_FUNC) &_FLasherTests_test_operatingModel_eval_om, 9},
    {"_FLasherTests_test_operatingModel_get_target_value_hat", (DL_FUNC) &_FLasherTests_test_operatingModel_get_target_value_hat, 5},
    {"_FLasherTests_test_operatingModel_get_target_value_hat2", (DL_FUNC) &_FLasherTests_test_operatingModel_get_target_value_hat2, 4},
    {"_FLasherTests_test_operatingModel_get_target_value", (DL_FUNC) &_FLasherTests_test_operatingModel_get_target_value, 5},
    {"_FLasherTests_test_operatingModel_get_target_value2", (DL_FUNC) &_FLasherTests_test_operatingModel_get_target_value2, 4},
    {"_FLasherTests_test_operatingModel_get_target_hat_indices", (DL_FUNC) &_FLasherTests_test_operatingModel_get_target_hat_indices, 7},
    {"_FLasherTests_test_operatingModel_catches_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_catches_subset, 6},
    {"_FLasherTests_test_operatingModel_landings_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_landings_subset, 6},
    {"_FLasherTests_test_operatingModel_discards_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_discards_subset, 6},
    {"_FLasherTests_test_operatingModel_catch_n_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_catch_n_subset, 6},
    {"_FLasherTests_test_operatingModel_landings_n_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_landings_n_subset, 6},
    {"_FLasherTests_test_operatingModel_discards_n_subset", (DL_FUNC) &_FLasherTests_test_operatingModel_discards_n_subset, 6},
    {"_FLasherTests_test_operatingModel_ssb_start", (DL_FUNC) &_FLasherTests_test_operatingModel_ssb_start, 6},
    {"_FLasherTests_test_operatingModel_biomass_start", (DL_FUNC) &_FLasherTests_test_operatingModel_biomass_start, 6},
    {"_FLasherTests_test_operatingModel_ssb_end", (DL_FUNC) &_FLasherTests_test_operatingModel_ssb_end, 6},
    {"_FLasherTests_test_operatingModel_ssb_spawn", (DL_FUNC) &_FLasherTests_test_operatingModel_ssb_spawn, 6},
    {"_FLasherTests_test_operatingModel_ssb_flash", (DL_FUNC) &_FLasherTests_test_operatingModel_ssb_flash, 6},
    {"_FLasherTests_test_operatingModel_biomass_flash", (DL_FUNC) &_FLasherTests_test_operatingModel_biomass_flash, 6},
    {"_FLasherTests_test_operatingModel_biomass_end", (DL_FUNC) &_FLasherTests_test_operatingModel_biomass_end, 6},
    {"_FLasherTests_test_operatingModel_biomass_spawn", (DL_FUNC) &_FLasherTests_test_operatingModel_biomass_spawn, 6},
    {"_FLasherTests_test_operatingModel_spawn_before_fishing", (DL_FUNC) &_FLasherTests_test_operatingModel_spawn_before_fishing, 6},
    {"_FLasherTests_test_operatingModel_fishing_before_spawn", (DL_FUNC) &_FLasherTests_test_operatingModel_fishing_before_spawn, 6},
    {"_FLasherTests_test_max3", (DL_FUNC) &_FLasherTests_test_max3, 1},
    {"_FLasherTests_test_max2", (DL_FUNC) &_FLasherTests_test_max2, 1},
    {"_FLasherTests_test_max", (DL_FUNC) &_FLasherTests_test_max, 1},
    {"_FLasherTests_test_standard_conditional", (DL_FUNC) &_FLasherTests_test_standard_conditional, 1},
    {"_FLasherTests_test_cppad_conditional", (DL_FUNC) &_FLasherTests_test_cppad_conditional, 1},
    {"_FLasherTests_test_euclid_norm", (DL_FUNC) &_FLasherTests_test_euclid_norm, 1},
    {"_FLasherTests_test_NR_quad_iters", (DL_FUNC) &_FLasherTests_test_NR_quad_iters, 6},
    {"_FLasherTests_test_NR_linear", (DL_FUNC) &_FLasherTests_test_NR_linear, 6},
    {"_FLasherTests_eval_user_function", (DL_FUNC) &_FLasherTests_eval_user_function, 2},
    {"_FLasherTests_eval_user_gradient", (DL_FUNC) &_FLasherTests_eval_user_gradient, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FLasherTests(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
